### YamlMime:ManagedReference
items:
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleReader
  commentId: T:Landorphan.Abstractions.Console.Interfaces.IConsoleReader
  id: IConsoleReader
  parent: Landorphan.Abstractions.Console.Interfaces
  children:
  - Landorphan.Abstractions.Console.Interfaces.IConsoleReader.KeyAvailable
  - Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read
  - Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadKey
  - Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadKey(System.Boolean)
  - Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadLine
  langs:
  - csharp
  - vb
  name: IConsoleReader
  nameWithType: IConsoleReader
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleReader
  type: Interface
  source:
    remote:
      path: source/Landorphan.Abstractions/Console/Interfaces/IConsoleReader.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: IConsoleReader
    path: ../../source/Landorphan.Abstractions/Console/Interfaces/IConsoleReader.cs
    startLine: 7
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.Console.Interfaces
  summary: "\nInterface for console reader.\n"
  example: []
  syntax:
    content: public interface IConsoleReader
    content.vb: Public Interface IConsoleReader
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.KeyAvailable
  commentId: P:Landorphan.Abstractions.Console.Interfaces.IConsoleReader.KeyAvailable
  id: KeyAvailable
  parent: Landorphan.Abstractions.Console.Interfaces.IConsoleReader
  langs:
  - csharp
  - vb
  name: KeyAvailable
  nameWithType: IConsoleReader.KeyAvailable
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.KeyAvailable
  type: Property
  source:
    remote:
      path: source/Landorphan.Abstractions/Console/Interfaces/IConsoleReader.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: KeyAvailable
    path: ../../source/Landorphan.Abstractions/Console/Interfaces/IConsoleReader.cs
    startLine: 15
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.Console.Interfaces
  summary: "\nGets a value indicating whether a key press is available in the input stream.\n"
  example: []
  syntax:
    content: bool KeyAvailable { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code> true </code> if a key press is available; otherwise, <code> false </code>.\n"
    content.vb: ReadOnly Property KeyAvailable As Boolean
  overload: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.KeyAvailable*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read
  commentId: M:Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read
  id: Read
  parent: Landorphan.Abstractions.Console.Interfaces.IConsoleReader
  langs:
  - csharp
  - vb
  name: Read()
  nameWithType: IConsoleReader.Read()
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read()
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/Console/Interfaces/IConsoleReader.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: Read
    path: ../../source/Landorphan.Abstractions/Console/Interfaces/IConsoleReader.cs
    startLine: 29
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.Console.Interfaces
  summary: "\nReads the next character from the standard input stream.\n"
  remarks: "\nThe <xref href=\"Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read\" data-throw-if-not-resolved=\"false\"></xref> method blocks its return while you type input characters; it terminates when you press the Enter key. Pressing Enter\nappends a platform-dependent line termination sequence to your input (for example, Windows appends a carriage return-linefeed sequence).\nSubsequent calls to the <xref href=\"Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read\" data-throw-if-not-resolved=\"false\"></xref> method retrieve your input one character at a time.  After the final character is retrieved,\n<xref href=\"Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read\" data-throw-if-not-resolved=\"false\"></xref> blocks its return again and the cycle repeats.\n"
  example: []
  syntax:
    content: int Read()
    return:
      type: System.Int32
      description: "\nThe next character from the input stream, or negative one (-1) if there are currently no more characters to be read.\n"
    content.vb: Function Read As Integer
  overload: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read*
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadKey
  commentId: M:Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadKey
  id: ReadKey
  parent: Landorphan.Abstractions.Console.Interfaces.IConsoleReader
  langs:
  - csharp
  - vb
  name: ReadKey()
  nameWithType: IConsoleReader.ReadKey()
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadKey()
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/Console/Interfaces/IConsoleReader.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: ReadKey
    path: ../../source/Landorphan.Abstractions/Console/Interfaces/IConsoleReader.cs
    startLine: 39
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.Console.Interfaces
  summary: "\nObtains the next character or function key pressed by the user.  The pressed key is displayed in the console window.\n"
  example: []
  syntax:
    content: ConsoleKeyInfo ReadKey()
    return:
      type: System.ConsoleKeyInfo
      description: "\nA ConsoleKeyInfo Object that describes the ConsoleKey constant and Unicode character, if any, that correspond to the pressed console key.\nThe ConsoleKeyInfo Object also describes, in a bitwise combination of ConsoleModifiers values, whether one or more Shift, Alt, or Ctrl\nmodifier keys was pressed simultaneously with the console key.\n"
    content.vb: Function ReadKey As ConsoleKeyInfo
  overload: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadKey*
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadKey(System.Boolean)
  commentId: M:Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadKey(System.Boolean)
  id: ReadKey(System.Boolean)
  parent: Landorphan.Abstractions.Console.Interfaces.IConsoleReader
  langs:
  - csharp
  - vb
  name: ReadKey(Boolean)
  nameWithType: IConsoleReader.ReadKey(Boolean)
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadKey(System.Boolean)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/Console/Interfaces/IConsoleReader.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: ReadKey
    path: ../../source/Landorphan.Abstractions/Console/Interfaces/IConsoleReader.cs
    startLine: 52
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.Console.Interfaces
  summary: "\nObtains the next character or function key pressed by the user.  The pressed key is optionally displayed in the console window.\n"
  example: []
  syntax:
    content: ConsoleKeyInfo ReadKey(bool intercept)
    parameters:
    - id: intercept
      type: System.Boolean
      description: "\nDetermines whether to display the pressed key in the console window. <code> true </code> to not display the pressed key; otherwise, <code> false </code>.\n"
    return:
      type: System.ConsoleKeyInfo
      description: "\nA ConsoleKeyInfo Object that describes the ConsoleKey constant and Unicode character, if any, that correspond to the pressed console key.\nThe ConsoleKeyInfo Object also describes, in a bitwise combination of ConsoleModifiers values, whether one or more Shift, Alt, or Ctrl modifier\nkeys was pressed simultaneously with the console key.\n"
    content.vb: Function ReadKey(intercept As Boolean) As ConsoleKeyInfo
  overload: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadKey*
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadLine
  commentId: M:Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadLine
  id: ReadLine
  parent: Landorphan.Abstractions.Console.Interfaces.IConsoleReader
  langs:
  - csharp
  - vb
  name: ReadLine()
  nameWithType: IConsoleReader.ReadLine()
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadLine()
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/Console/Interfaces/IConsoleReader.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: ReadLine
    path: ../../source/Landorphan.Abstractions/Console/Interfaces/IConsoleReader.cs
    startLine: 60
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.Console.Interfaces
  summary: "\nReads the next line of characters from the standard input stream.\n"
  example: []
  syntax:
    content: string ReadLine()
    return:
      type: System.String
      description: "\nThe next line of characters from the input stream, or <code> null </code> if no more lines are available.\n"
    content.vb: Function ReadLine As String
  overload: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadLine*
references:
- uid: Landorphan.Abstractions.Console.Interfaces
  commentId: N:Landorphan.Abstractions.Console.Interfaces
  name: Landorphan.Abstractions.Console.Interfaces
  nameWithType: Landorphan.Abstractions.Console.Interfaces
  fullName: Landorphan.Abstractions.Console.Interfaces
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.KeyAvailable*
  commentId: Overload:Landorphan.Abstractions.Console.Interfaces.IConsoleReader.KeyAvailable
  name: KeyAvailable
  nameWithType: IConsoleReader.KeyAvailable
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.KeyAvailable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read
  commentId: M:Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read
  parent: Landorphan.Abstractions.Console.Interfaces.IConsoleReader
  name: Read()
  nameWithType: IConsoleReader.Read()
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read()
  spec.csharp:
  - uid: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read
    name: Read
    nameWithType: IConsoleReader.Read
    fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read
    name: Read
    nameWithType: IConsoleReader.Read
    fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read*
  commentId: Overload:Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read
  name: Read
  nameWithType: IConsoleReader.Read
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.Read
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleReader
  commentId: T:Landorphan.Abstractions.Console.Interfaces.IConsoleReader
  parent: Landorphan.Abstractions.Console.Interfaces
  name: IConsoleReader
  nameWithType: IConsoleReader
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleReader
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadKey*
  commentId: Overload:Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadKey
  name: ReadKey
  nameWithType: IConsoleReader.ReadKey
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadKey
- uid: System.ConsoleKeyInfo
  commentId: T:System.ConsoleKeyInfo
  parent: System
  isExternal: true
  name: ConsoleKeyInfo
  nameWithType: ConsoleKeyInfo
  fullName: System.ConsoleKeyInfo
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadLine*
  commentId: Overload:Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadLine
  name: ReadLine
  nameWithType: IConsoleReader.ReadLine
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleReader.ReadLine
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
