### YamlMime:ManagedReference
items:
- uid: Landorphan.Abstractions.IO.FileWriterUtilities
  commentId: T:Landorphan.Abstractions.IO.FileWriterUtilities
  id: FileWriterUtilities
  parent: Landorphan.Abstractions.IO
  children:
  - Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  - Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllText(System.String,System.String,System.Text.Encoding)
  - Landorphan.Abstractions.IO.FileWriterUtilities.CopyNoOverwrite(System.String,System.String)
  - Landorphan.Abstractions.IO.FileWriterUtilities.CopyWithOverwrite(System.String,System.String)
  - Landorphan.Abstractions.IO.FileWriterUtilities.Move(System.String,System.String)
  - Landorphan.Abstractions.IO.FileWriterUtilities.OpenWrite(System.String)
  - Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackup(System.String,System.String)
  - Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors(System.String,System.String)
  - Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackup(System.String,System.String,System.String)
  - Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors(System.String,System.String,System.String)
  - Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllBytes(System.String,System.Byte[])
  - Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllBytes(System.String,System.Collections.Immutable.IImmutableList{System.Byte})
  - Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  - Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines(System.String,System.Collections.Immutable.IImmutableList{System.String},System.Text.Encoding)
  - Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines(System.String,System.String[],System.Text.Encoding)
  - Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllText(System.String,System.String,System.Text.Encoding)
  langs:
  - csharp
  - vb
  name: FileWriterUtilities
  nameWithType: FileWriterUtilities
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities
  type: Class
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: FileWriterUtilities
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 14
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nDefault implementation of <xref href=\"Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public sealed class FileWriterUtilities : IFileWriterUtilities'
    content.vb: >-
      Public NotInheritable Class FileWriterUtilities
          Implements IFileWriterUtilities
  inheritance:
  - System.Object
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  id: AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: AppendAllLines(String, IEnumerable<String>, Encoding)
  nameWithType: FileWriterUtilities.AppendAllLines(String, IEnumerable<String>, Encoding)
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllLines(System.String, System.Collections.Generic.IEnumerable<System.String>, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: AppendAllLines
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 17
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nAppends lines to a file, and then closes the file.  If the specified path root exits, this method will create intermediate directories and \nthe file itself as needed.  It then appends the specified lines to the file, and closes the file.\n"
  example: []
  syntax:
    content: public void AppendAllLines(string path, IEnumerable<string> contents, Encoding encoding)
    parameters:
    - id: path
      type: System.String
      description: "\nThe file to append the lines to. The file is created if it does not already exist.\n"
    - id: contents
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "\nThe lines to append to the file (<code>null</code> line items are coalesced to <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>).\n"
    - id: encoding
      type: System.Text.Encoding
      description: "\nThe character encoding to use.\n"
    content.vb: Public Sub AppendAllLines(path As String, contents As IEnumerable(Of String), encoding As Encoding)
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllLines*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\"> path </code> is <code>null</code>\n-or- \n<code data-dev-comment-type=\"paramref\" class=\"paramref\">contents</code> is <code>null</code>\n-or- \n<code data-dev-comment-type=\"paramref\" class=\"paramref\">encoding</code> is <code>null</code>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is a zero-length string,\n-or-\ncontains only white space,\n-or-\ncontains one more invalid characters defined by the <xref href=\"Landorphan.Abstractions.IO.Interfaces.IPathUtilities.GetInvalidPathCharacters\" data-throw-if-not-resolved=\"false\"></xref> method,\n-or-\ncontains one more invalid characters defined by the <xref href=\"Landorphan.Abstractions.IO.Interfaces.IPathUtilities.GetInvalidFileNameCharacters\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is invalid (for example, it is on an unmapped drive).\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nWhen an I/O error occurs while opening the file (for example, the path identifies an existing directory).\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> exceeds the system-defined maximum length.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is in an invalid format.\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThe caller does not have permission to write to the file.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specifies a file that is read-only.\n-or-\nspecifies directory path for which the caller does not have write permissions.\n-or-\nThis operation is not supported on the current platform.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  nameWithType.vb: FileWriterUtilities.AppendAllLines(String, IEnumerable(Of String), Encoding)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllLines(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.Text.Encoding)
  name.vb: AppendAllLines(String, IEnumerable(Of String), Encoding)
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllText(System.String,System.String,System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllText(System.String,System.String,System.Text.Encoding)
  id: AppendAllText(System.String,System.String,System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: AppendAllText(String, String, Encoding)
  nameWithType: FileWriterUtilities.AppendAllText(String, String, Encoding)
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllText(System.String, System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: AppendAllText
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 24
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nAppends the specified string to the file, creating the file if it does not already exist.\n"
  example: []
  syntax:
    content: public void AppendAllText(string path, string contents, Encoding encoding)
    parameters:
    - id: path
      type: System.String
      description: "\nThe file to append the specified string to.\n"
    - id: contents
      type: System.String
      description: "\nThe string to append to the file.\n"
    - id: encoding
      type: System.Text.Encoding
      description: "\nThe character encoding to use.\n"
    content.vb: Public Sub AppendAllText(path As String, contents As String, encoding As Encoding)
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is a zero-length string, contains only white space, or contains one or\nmore invalid characters as defined by\n<xref href=\"Landorphan.Abstractions.IO.Interfaces.IPathUtilities.GetInvalidPathCharacters\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is null.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\nThe specified path is invalid (for example, it is on an unmapped drive).\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurred while opening the file.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a file that is read-only.-or- This operation is not\nsupported on the current platform.-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a directory.\n-or-\nThe caller does not have the required permission.\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\nThe file specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> was not found.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is in an invalid format.\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThe caller does not have the required permission.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllText(System.String,System.String,System.Text.Encoding)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.CopyNoOverwrite(System.String,System.String)
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.CopyNoOverwrite(System.String,System.String)
  id: CopyNoOverwrite(System.String,System.String)
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: CopyNoOverwrite(String, String)
  nameWithType: FileWriterUtilities.CopyNoOverwrite(String, String)
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.CopyNoOverwrite(System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: CopyNoOverwrite
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 31
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nCopies an existing file to a new file. Overwriting a file of the same name is not allowed.\n"
  example: []
  syntax:
    content: public void CopyNoOverwrite(string sourceFileName, string destFileName)
    parameters:
    - id: sourceFileName
      type: System.String
      description: "\nThe file to copy.\n"
    - id: destFileName
      type: System.String
      description: "\nThe name of the destination file. This cannot be a directory or an existing file.\n"
    content.vb: Public Sub CopyNoOverwrite(sourceFileName As String, destFileName As String)
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.CopyNoOverwrite*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\nThe caller does not have the required permission.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> or <code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code> is a zero-length string,\ncontains only white space, or contains one or more invalid characters as defined by\n<xref href=\"Landorphan.Abstractions.IO.Interfaces.IPathUtilities.GetInvalidPathCharacters\" data-throw-if-not-resolved=\"false\"></xref>.\n-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> or <code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code> specifies a directory.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> or <code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code> is null.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\nThe path specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> or\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code> is invalid (for example, it is on an unmapped\ndrive).\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> was not found.\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code> exists.-or- An I/O error has occurred.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> or <code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code> is in an invalid\nformat.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyNoOverwrite(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.CopyWithOverwrite(System.String,System.String)
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.CopyWithOverwrite(System.String,System.String)
  id: CopyWithOverwrite(System.String,System.String)
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: CopyWithOverwrite(String, String)
  nameWithType: FileWriterUtilities.CopyWithOverwrite(String, String)
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.CopyWithOverwrite(System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: CopyWithOverwrite
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 38
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nCopies an existing file to a new file. Overwriting a file of the same name is allowed.\n"
  example: []
  syntax:
    content: public void CopyWithOverwrite(string sourceFileName, string destFileName)
    parameters:
    - id: sourceFileName
      type: System.String
      description: "\nThe file to copy.\n"
    - id: destFileName
      type: System.String
      description: "\nThe name of the destination file. This cannot be a directory.\n"
    content.vb: Public Sub CopyWithOverwrite(sourceFileName As String, destFileName As String)
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.CopyWithOverwrite*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\nThe caller does not have the required permission. -or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code>\nis read-only.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> or <code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code> is a zero-length string,\ncontains only white space, or contains one or more invalid characters as defined by\n<xref href=\"Landorphan.Abstractions.IO.Interfaces.IPathUtilities.GetInvalidPathCharacters\" data-throw-if-not-resolved=\"false\"></xref>.\n-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> or <code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code> specifies a directory.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> or <code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code> is null.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\nThe path specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> or\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code> is invalid (for example, it is on an unmapped\ndrive).\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> was not found.\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurs.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> or <code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code> is in an invalid\nformat.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyWithOverwrite(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.Move(System.String,System.String)
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.Move(System.String,System.String)
  id: Move(System.String,System.String)
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: Move(String, String)
  nameWithType: FileWriterUtilities.Move(String, String)
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.Move(System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: Move
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 45
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nMoves a specified file to a new location, providing the option to specify a new file name.\n"
  example: []
  syntax:
    content: public void Move(string sourceFileName, string destFileName)
    parameters:
    - id: sourceFileName
      type: System.String
      description: "\nThe name of the file to move.\n"
    - id: destFileName
      type: System.String
      description: "\nThe new path for the file.\n"
    content.vb: Public Sub Move(sourceFileName As String, destFileName As String)
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.Move*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nThe destination file already exists.-or-<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> was not found.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> or <code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code> is null.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> or <code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code> is a zero-length string,\ncontains only white space, or contains invalid characters as defined in\n<xref href=\"Landorphan.Abstractions.IO.Interfaces.IPathUtilities.GetInvalidPathCharacters\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\nThe caller does not have the required permission.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\nThe path specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> or\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code> is invalid, (for example, it is on an unmapped\ndrive).\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> or <code data-dev-comment-type=\"paramref\" class=\"paramref\">destFileName</code> is in an invalid\nformat.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.Move(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.OpenWrite(System.String)
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.OpenWrite(System.String)
  id: OpenWrite(System.String)
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: OpenWrite(String)
  nameWithType: FileWriterUtilities.OpenWrite(String)
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.OpenWrite(System.String)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: OpenWrite
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 52
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nOpens an existing file or creates a new file for writing.\n"
  example: []
  syntax:
    content: public FileStream OpenWrite(string path)
    parameters:
    - id: path
      type: System.String
      description: "\nThe file to be opened for writing.\n"
    return:
      type: System.IO.FileStream
      description: "\nAn unshared <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> object on the specified path with <xref href=\"System.IO.FileAccess.Write\" data-throw-if-not-resolved=\"false\"></xref> access.\n"
    content.vb: Public Function OpenWrite(path As String) As FileStream
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.OpenWrite*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is null.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code>, file name, or both exceed the system-defined maximum length.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\nThe specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is invalid, (for example, it is on an unmapped drive). \n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurred while opening the file. \n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a file that is read-only.\n-or-\nThis operation is not supported on the current platform.\n-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a directory.\n-or-\nThe caller does not have the required permission.\n-or-\nmode is <xref href=\"System.IO.FileMode.Create\" data-throw-if-not-resolved=\"false\"></xref> and the specified file is a hidden file.\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\nThe file specified in path was not found.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is in an invalid format.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.OpenWrite(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackup(System.String,System.String)
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackup(System.String,System.String)
  id: ReplaceContentsNoBackup(System.String,System.String)
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: ReplaceContentsNoBackup(String, String)
  nameWithType: FileWriterUtilities.ReplaceContentsNoBackup(String, String)
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackup(System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: ReplaceContentsNoBackup
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 59
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nReplaces the contents of a file with the contents from another file, deleting the original file.\n"
  example: []
  syntax:
    content: public void ReplaceContentsNoBackup(string sourceFileName, string destinationFileName)
    parameters:
    - id: sourceFileName
      type: System.String
      description: "\nThe name of a file that holds the replacement contents, and will be deleted.\n"
    - id: destinationFileName
      type: System.String
      description: "\nThe name of the file whose contents will be replaced.\n"
    content.vb: Public Sub ReplaceContentsNoBackup(sourceFileName As String, destinationFileName As String)
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackup*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter is null.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter is null.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe path described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter was not of a legal form.\n-or-\nThe path described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter was not of a legal form.\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\nThe file described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter could not be found.\n-or-\nThe file described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter could not be found.\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurred while opening the file.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameters specify the same file.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter specifies a directory.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter specifies a directory.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\nThe operating system is Windows 98 Second Edition or earlier.\n-or-\nthe file system is not NTFS.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter specifies a file that is read-only.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter specifies a directory.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter specifies a file that is read-only.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter specifies a directory.\n-or-\nThis operation is not supported on the current platform.\n-or- \nThe caller does not have the required permission.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackup(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors(System.String,System.String)
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors(System.String,System.String)
  id: ReplaceContentsNoBackupIgnoringMetadataErrors(System.String,System.String)
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: ReplaceContentsNoBackupIgnoringMetadataErrors(String, String)
  nameWithType: FileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors(String, String)
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors(System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: ReplaceContentsNoBackupIgnoringMetadataErrors
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 66
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nReplaces the contents of a file with the contents from another file, deleting the original file and ignoring metadata errors.\n"
  example: []
  syntax:
    content: public void ReplaceContentsNoBackupIgnoringMetadataErrors(string sourceFileName, string destinationFileName)
    parameters:
    - id: sourceFileName
      type: System.String
      description: "\nThe name of a file that holds the replacement contents, and will be deleted.\n"
    - id: destinationFileName
      type: System.String
      description: "\nThe name of the file whose contents will be replaced.\n"
    content.vb: Public Sub ReplaceContentsNoBackupIgnoringMetadataErrors(sourceFileName As String, destinationFileName As String)
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter is null.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter is null.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe path described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter was not of a legal form.\n-or-\nThe path described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter was not of a legal form.\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\nThe file described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter could not be found.\n-or-\nThe file described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter could not be found.\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurred while opening the file.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameters specify the same file.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter specifies a directory.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter specifies a directory.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\nThe operating system is Windows 98 Second Edition or earlier.\n-or-\nthe file system is not NTFS.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter specifies a file that is read-only.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter specifies a directory.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter specifies a file that is read-only.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter specifies a directory.\n-or-\nThis operation is not supported on the current platform.\n-or- \nThe caller does not have the required permission.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackup(System.String,System.String,System.String)
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackup(System.String,System.String,System.String)
  id: ReplaceContentsWithBackup(System.String,System.String,System.String)
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: ReplaceContentsWithBackup(String, String, String)
  nameWithType: FileWriterUtilities.ReplaceContentsWithBackup(String, String, String)
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackup(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: ReplaceContentsWithBackup
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 73
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nReplaces the contents of a file with the contents from another file, deleting the original file, and backing up the original contents of the replaced file\n"
  example: []
  syntax:
    content: public void ReplaceContentsWithBackup(string sourceFileName, string destinationFileName, string destinationBackupFileName)
    parameters:
    - id: sourceFileName
      type: System.String
      description: "\nThe name of a file that holds the replacement contents, and will be deleted.\n"
    - id: destinationFileName
      type: System.String
      description: "\nThe name of the file whose contents will be replaced.\n"
    - id: destinationBackupFileName
      type: System.String
      description: "\nThe name of the destination backup file.\n"
    content.vb: Public Sub ReplaceContentsWithBackup(sourceFileName As String, destinationFileName As String, destinationBackupFileName As String)
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackup*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter is null.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter is null.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationBackupFileName</code> parameter is null.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe path described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter was not of a legal form.\n-or-\nThe path described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter was not of a legal form.\n-or-\nThe path described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationBackupFileName</code> parameter was not of a legal form.\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\nThe file described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter could not be found.\n-or-\nThe file described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter could not be found.\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurred while opening the file.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter specifies a directory.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter specifies a directory.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationBackupFileName</code> parameter specifies a directory.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameters specify the same file.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationBackupFileName</code> parameters specify the same file.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationBackupFileName</code> parameters specify the same file.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\nThe operating system is Windows 98 Second Edition or earlier.\n-or-\nthe file system is not NTFS.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter specifies a file that is read-only.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter specifies a directory.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter specifies a file that is read-only.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter specifies a directory.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationBackupFileName</code> parameter specifies a file that is read-only.\n-or- \nThis operation is not supported on the current platform.\n-or- \nThe caller does not have the required permission.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackup(System.String,System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors(System.String,System.String,System.String)
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors(System.String,System.String,System.String)
  id: ReplaceContentsWithBackupIgnoringMetadataErrors(System.String,System.String,System.String)
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: ReplaceContentsWithBackupIgnoringMetadataErrors(String, String, String)
  nameWithType: FileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors(String, String, String)
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: ReplaceContentsWithBackupIgnoringMetadataErrors
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 80
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nReplaces the contents of a file with the contents from another file, deleting the original file, and backing up the original contents of the replaced file and ignoring metadata errors.\n"
  example: []
  syntax:
    content: public void ReplaceContentsWithBackupIgnoringMetadataErrors(string sourceFileName, string destinationFileName, string destinationBackupFileName)
    parameters:
    - id: sourceFileName
      type: System.String
      description: "\nThe name of a file that holds the replacement contents, and will be deleted.\n"
    - id: destinationFileName
      type: System.String
      description: "\nThe name of the file whose contents will be replaced.\n"
    - id: destinationBackupFileName
      type: System.String
      description: "\nThe name of the destination backup file.\n"
    content.vb: Public Sub ReplaceContentsWithBackupIgnoringMetadataErrors(sourceFileName As String, destinationFileName As String, destinationBackupFileName As String)
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter is null.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter is null.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationBackupFileName</code> parameter is null.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe path described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter was not of a legal form.\n-or-\nThe path described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter was not of a legal form.\n-or-\nThe path described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationBackupFileName</code> parameter was not of a legal form.\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\nThe file described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter could not be found.\n-or-\nThe file described by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter could not be found.\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurred while opening the file.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter specifies a directory.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter specifies a directory.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationBackupFileName</code> parameter specifies a directory.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameters specify the same file.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationBackupFileName</code> parameters specify the same file.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationBackupFileName</code> parameters specify the same file.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\nThe operating system is Windows 98 Second Edition or earlier.\n-or-\nthe file system is not NTFS.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter specifies a file that is read-only.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceFileName</code> parameter specifies a directory.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter specifies a file that is read-only.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationFileName</code> parameter specifies a directory.\n-or-\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">destinationBackupFileName</code> parameter specifies a file that is read-only.\n-or- \nThis operation is not supported on the current platform.\n-or- \nThe caller does not have the required permission.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors(System.String,System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllBytes(System.String,System.Byte[])
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllBytes(System.String,System.Byte[])
  id: WriteAllBytes(System.String,System.Byte[])
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: WriteAllBytes(String, Byte[])
  nameWithType: FileWriterUtilities.WriteAllBytes(String, Byte[])
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllBytes(System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: WriteAllBytes
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 87
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nCreates or overwrites the contents of the specified file, writing the bytes, and closing the file.\n"
  example: []
  syntax:
    content: public void WriteAllBytes(string path, byte[] bytes)
    parameters:
    - id: path
      type: System.String
      description: "\nThe file to write to.\n"
    - id: bytes
      type: System.Byte[]
      description: "\nThe bytes to write to the file.\n"
    content.vb: Public Sub WriteAllBytes(path As String, bytes As Byte())
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllBytes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is a zero-length string.\n-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> contains only white space\n-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> contains one or more invalid characters as defined by <xref href=\"Landorphan.Abstractions.IO.Interfaces.IPathUtilities.GetInvalidPathCharacters\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is null \n-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">bytes</code> is null \n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\nThe specified path is invalid (for example, it is on an unmapped drive).\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurred while opening the file.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a file that is read-only.\n-or- \nThis operation is not supported on the current platform.\n-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a directory.\n-or-\nThe caller does not have the required permission.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is in an invalid format.\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThe caller does not have the required permission.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes(System.String,System.Byte[])
  nameWithType.vb: FileWriterUtilities.WriteAllBytes(String, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllBytes(System.String, System.Byte())
  name.vb: WriteAllBytes(String, Byte())
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllBytes(System.String,System.Collections.Immutable.IImmutableList{System.Byte})
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllBytes(System.String,System.Collections.Immutable.IImmutableList{System.Byte})
  id: WriteAllBytes(System.String,System.Collections.Immutable.IImmutableList{System.Byte})
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: WriteAllBytes(String, IImmutableList<Byte>)
  nameWithType: FileWriterUtilities.WriteAllBytes(String, IImmutableList<Byte>)
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllBytes(System.String, System.Collections.Immutable.IImmutableList<System.Byte>)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: WriteAllBytes
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 94
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nCreates or overwrites the contents of the specified file, writing the bytes, and closing the file.\n"
  example: []
  syntax:
    content: public void WriteAllBytes(string path, IImmutableList<byte> bytes)
    parameters:
    - id: path
      type: System.String
      description: "\nThe file to write to.\n"
    - id: bytes
      type: System.Collections.Immutable.IImmutableList{System.Byte}
      description: "\nThe bytes to write to the file.\n"
    content.vb: Public Sub WriteAllBytes(path As String, bytes As IImmutableList(Of Byte))
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllBytes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is a zero-length string.\n-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> contains only white space\n-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> contains one or more invalid characters as defined by <xref href=\"Landorphan.Abstractions.IO.Interfaces.IPathUtilities.GetInvalidPathCharacters\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is null \n-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">bytes</code> is null \n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\nThe specified path is invalid (for example, it is on an unmapped drive).\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurred while opening the file.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a file that is read-only.\n-or- \nThis operation is not supported on the current platform.\n-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a directory.\n-or-\nThe caller does not have the required permission.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is in an invalid format.\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThe caller does not have the required permission.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes(System.String,System.Collections.Immutable.IImmutableList{System.Byte})
  nameWithType.vb: FileWriterUtilities.WriteAllBytes(String, IImmutableList(Of Byte))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllBytes(System.String, System.Collections.Immutable.IImmutableList(Of System.Byte))
  name.vb: WriteAllBytes(String, IImmutableList(Of Byte))
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines(System.String,System.String[],System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines(System.String,System.String[],System.Text.Encoding)
  id: WriteAllLines(System.String,System.String[],System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: WriteAllLines(String, String[], Encoding)
  nameWithType: FileWriterUtilities.WriteAllLines(String, String[], Encoding)
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines(System.String, System.String[], System.Text.Encoding)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: WriteAllLines
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 101
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nCreates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.\n"
  example: []
  syntax:
    content: public void WriteAllLines(string path, string[] contents, Encoding encoding)
    parameters:
    - id: path
      type: System.String
      description: "\nThe file to write to.\n"
    - id: contents
      type: System.String[]
      description: "\nThe string array to write to the file.\n"
    - id: encoding
      type: System.Text.Encoding
      description: "\nAn <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> object that represents the character encoding applied to the string array.\n"
    content.vb: Public Sub WriteAllLines(path As String, contents As String(), encoding As Encoding)
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is a zero-length string, contains only white space, or contains one or\nmore invalid characters as defined by\n<xref href=\"Landorphan.Abstractions.IO.Interfaces.IPathUtilities.GetInvalidPathCharacters\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nEither <code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> or <code data-dev-comment-type=\"paramref\" class=\"paramref\">contents</code> is null.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\nThe specified path is invalid (for example, it is on an unmapped drive).\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurred while opening the file.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a file that is read-only.-or- This operation is not\nsupported on the current platform.-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a directory.\n-or-\nThe caller does not have the required permission.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is in an invalid format.\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThe caller does not have the required permission.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String,System.String[],System.Text.Encoding)
  nameWithType.vb: FileWriterUtilities.WriteAllLines(String, String(), Encoding)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines(System.String, System.String(), System.Text.Encoding)
  name.vb: WriteAllLines(String, String(), Encoding)
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines(System.String,System.Collections.Immutable.IImmutableList{System.String},System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines(System.String,System.Collections.Immutable.IImmutableList{System.String},System.Text.Encoding)
  id: WriteAllLines(System.String,System.Collections.Immutable.IImmutableList{System.String},System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: WriteAllLines(String, IImmutableList<String>, Encoding)
  nameWithType: FileWriterUtilities.WriteAllLines(String, IImmutableList<String>, Encoding)
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines(System.String, System.Collections.Immutable.IImmutableList<System.String>, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: WriteAllLines
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 108
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nCreates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.\n"
  example: []
  syntax:
    content: public void WriteAllLines(string path, IImmutableList<string> contents, Encoding encoding)
    parameters:
    - id: path
      type: System.String
      description: "\nThe file to write to.\n"
    - id: contents
      type: System.Collections.Immutable.IImmutableList{System.String}
      description: "\nThe string array to write to the file.\n"
    - id: encoding
      type: System.Text.Encoding
      description: "\nAn <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> object that represents the character encoding applied to the string array.\n"
    content.vb: Public Sub WriteAllLines(path As String, contents As IImmutableList(Of String), encoding As Encoding)
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is a zero-length string, contains only white space, or contains one or\nmore invalid characters as defined by\n<xref href=\"Landorphan.Abstractions.IO.Interfaces.IPathUtilities.GetInvalidPathCharacters\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nEither <code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> or <code data-dev-comment-type=\"paramref\" class=\"paramref\">contents</code> is null.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\nThe specified path is invalid (for example, it is on an unmapped drive).\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurred while opening the file.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a file that is read-only.-or- This operation is not\nsupported on the current platform.-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a directory.\n-or-\nThe caller does not have the required permission.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is in an invalid format.\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThe caller does not have the required permission.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String,System.Collections.Immutable.IImmutableList{System.String},System.Text.Encoding)
  nameWithType.vb: FileWriterUtilities.WriteAllLines(String, IImmutableList(Of String), Encoding)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines(System.String, System.Collections.Immutable.IImmutableList(Of System.String), System.Text.Encoding)
  name.vb: WriteAllLines(String, IImmutableList(Of String), Encoding)
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  id: WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: WriteAllLines(String, IEnumerable<String>, Encoding)
  nameWithType: FileWriterUtilities.WriteAllLines(String, IEnumerable<String>, Encoding)
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines(System.String, System.Collections.Generic.IEnumerable<System.String>, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: WriteAllLines
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 115
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nCreates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.\n"
  example: []
  syntax:
    content: public void WriteAllLines(string path, IEnumerable<string> contents, Encoding encoding)
    parameters:
    - id: path
      type: System.String
      description: "\nThe file to write to.\n"
    - id: contents
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "\nThe lines to write to the file.\n"
    - id: encoding
      type: System.Text.Encoding
      description: "\nThe character encoding to use.\n"
    content.vb: Public Sub WriteAllLines(path As String, contents As IEnumerable(Of String), encoding As Encoding)
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is a zero-length string, contains only white space, or contains one or\nmore invalid characters defined by the\n<xref href=\"Landorphan.Abstractions.IO.Interfaces.IPathUtilities.GetInvalidPathCharacters\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nEither<code data-dev-comment-type=\"paramref\" class=\"paramref\"> path</code>,<code data-dev-comment-type=\"paramref\" class=\"paramref\"> contents</code>, or\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">encoding</code> is null.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is invalid (for example, it is on an unmapped drive).\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurred while opening the file.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> exceeds the system-defined maximum length.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is in an invalid format.\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThe caller does not have the required permission.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specifies a file that is read-only.-or-This operation is not\nsupported on the current platform.-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is a directory.\n-or-\nThe caller does not have the required permission.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  nameWithType.vb: FileWriterUtilities.WriteAllLines(String, IEnumerable(Of String), Encoding)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.Text.Encoding)
  name.vb: WriteAllLines(String, IEnumerable(Of String), Encoding)
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllText(System.String,System.String,System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllText(System.String,System.String,System.Text.Encoding)
  id: WriteAllText(System.String,System.String,System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.FileWriterUtilities
  langs:
  - csharp
  - vb
  name: WriteAllText(String, String, Encoding)
  nameWithType: FileWriterUtilities.WriteAllText(String, String, Encoding)
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllText(System.String, System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
      branch: develop
      repo: https://github.com/landorphan/service-location.git
    id: WriteAllText
    path: ../../source/Landorphan.Abstractions/IO/FileWriterUtilities.cs
    startLine: 122
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nCreates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target\nfile already exists, it is overwritten.\n"
  example: []
  syntax:
    content: public void WriteAllText(string path, string contents, Encoding encoding)
    parameters:
    - id: path
      type: System.String
      description: "\nThe file to write to.\n"
    - id: contents
      type: System.String
      description: "\nThe string to write to the file.\n"
    - id: encoding
      type: System.Text.Encoding
      description: "\nThe encoding to apply to the string.\n"
    content.vb: Public Sub WriteAllText(path As String, contents As String, encoding As Encoding)
  overload: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is a zero-length string, contains only white space, or contains one or\nmore invalid characters as defined by\n<xref href=\"Landorphan.Abstractions.IO.Interfaces.IPathUtilities.GetInvalidPathCharacters\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is null or <code data-dev-comment-type=\"paramref\" class=\"paramref\">contents</code> is empty.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\nThe specified path is invalid (for example, it is on an unmapped drive).\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurred while opening the file.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a file that is read-only.-or- This operation is not\nsupported on the current platform.-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a directory.\n-or-\nThe caller does not have the required permission.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is in an invalid format.\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThe caller does not have the required permission.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllText(System.String,System.String,System.Text.Encoding)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  commentId: T:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  parent: Landorphan.Abstractions.IO.Interfaces
  name: IFileWriterUtilities
  nameWithType: IFileWriterUtilities
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
- uid: Landorphan.Abstractions.IO
  commentId: N:Landorphan.Abstractions.IO
  name: Landorphan.Abstractions.IO
  nameWithType: Landorphan.Abstractions.IO
  fullName: Landorphan.Abstractions.IO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Landorphan.Abstractions.IO.Interfaces
  commentId: N:Landorphan.Abstractions.IO.Interfaces
  name: Landorphan.Abstractions.IO.Interfaces
  nameWithType: Landorphan.Abstractions.IO.Interfaces
  fullName: Landorphan.Abstractions.IO.Interfaces
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllLines*
  commentId: Overload:Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllLines
  name: AppendAllLines
  nameWithType: FileWriterUtilities.AppendAllLines
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllLines
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: AppendAllLines(String, IEnumerable<String>, Encoding)
  nameWithType: IFileWriterUtilities.AppendAllLines(String, IEnumerable<String>, Encoding)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllLines(System.String, System.Collections.Generic.IEnumerable<System.String>, System.Text.Encoding)
  nameWithType.vb: IFileWriterUtilities.AppendAllLines(String, IEnumerable(Of String), Encoding)
  fullName.vb: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllLines(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.Text.Encoding)
  name.vb: AppendAllLines(String, IEnumerable(Of String), Encoding)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
    name: AppendAllLines
    nameWithType: IFileWriterUtilities.AppendAllLines
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllLines
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
    name: AppendAllLines
    nameWithType: IFileWriterUtilities.AppendAllLines
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllLines
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.IO.DirectoryNotFoundException
  commentId: T:System.IO.DirectoryNotFoundException
  isExternal: true
- uid: System.IO.IOException
  commentId: T:System.IO.IOException
  isExternal: true
- uid: System.IO.PathTooLongException
  commentId: T:System.IO.PathTooLongException
  isExternal: true
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  isExternal: true
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
  isExternal: true
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllText*
  commentId: Overload:Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllText
  name: AppendAllText
  nameWithType: FileWriterUtilities.AppendAllText
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.AppendAllText
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllText(System.String,System.String,System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllText(System.String,System.String,System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: AppendAllText(String, String, Encoding)
  nameWithType: IFileWriterUtilities.AppendAllText(String, String, Encoding)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllText(System.String, System.String, System.Text.Encoding)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllText(System.String,System.String,System.Text.Encoding)
    name: AppendAllText
    nameWithType: IFileWriterUtilities.AppendAllText
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllText
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllText(System.String,System.String,System.Text.Encoding)
    name: AppendAllText
    nameWithType: IFileWriterUtilities.AppendAllText
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.AppendAllText
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
  isExternal: true
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.CopyNoOverwrite*
  commentId: Overload:Landorphan.Abstractions.IO.FileWriterUtilities.CopyNoOverwrite
  name: CopyNoOverwrite
  nameWithType: FileWriterUtilities.CopyNoOverwrite
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.CopyNoOverwrite
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyNoOverwrite(System.String,System.String)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyNoOverwrite(System.String,System.String)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: CopyNoOverwrite(String, String)
  nameWithType: IFileWriterUtilities.CopyNoOverwrite(String, String)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyNoOverwrite(System.String, System.String)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyNoOverwrite(System.String,System.String)
    name: CopyNoOverwrite
    nameWithType: IFileWriterUtilities.CopyNoOverwrite
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyNoOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyNoOverwrite(System.String,System.String)
    name: CopyNoOverwrite
    nameWithType: IFileWriterUtilities.CopyNoOverwrite
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyNoOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.CopyWithOverwrite*
  commentId: Overload:Landorphan.Abstractions.IO.FileWriterUtilities.CopyWithOverwrite
  name: CopyWithOverwrite
  nameWithType: FileWriterUtilities.CopyWithOverwrite
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.CopyWithOverwrite
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyWithOverwrite(System.String,System.String)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyWithOverwrite(System.String,System.String)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: CopyWithOverwrite(String, String)
  nameWithType: IFileWriterUtilities.CopyWithOverwrite(String, String)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyWithOverwrite(System.String, System.String)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyWithOverwrite(System.String,System.String)
    name: CopyWithOverwrite
    nameWithType: IFileWriterUtilities.CopyWithOverwrite
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyWithOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyWithOverwrite(System.String,System.String)
    name: CopyWithOverwrite
    nameWithType: IFileWriterUtilities.CopyWithOverwrite
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.CopyWithOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.Move*
  commentId: Overload:Landorphan.Abstractions.IO.FileWriterUtilities.Move
  name: Move
  nameWithType: FileWriterUtilities.Move
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.Move
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.Move(System.String,System.String)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.Move(System.String,System.String)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: Move(String, String)
  nameWithType: IFileWriterUtilities.Move(String, String)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.Move(System.String, System.String)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.Move(System.String,System.String)
    name: Move
    nameWithType: IFileWriterUtilities.Move
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.Move
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.Move(System.String,System.String)
    name: Move
    nameWithType: IFileWriterUtilities.Move
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.Move
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.OpenWrite*
  commentId: Overload:Landorphan.Abstractions.IO.FileWriterUtilities.OpenWrite
  name: OpenWrite
  nameWithType: FileWriterUtilities.OpenWrite
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.OpenWrite
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.OpenWrite(System.String)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.OpenWrite(System.String)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: OpenWrite(String)
  nameWithType: IFileWriterUtilities.OpenWrite(String)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.OpenWrite(System.String)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.OpenWrite(System.String)
    name: OpenWrite
    nameWithType: IFileWriterUtilities.OpenWrite
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.OpenWrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.OpenWrite(System.String)
    name: OpenWrite
    nameWithType: IFileWriterUtilities.OpenWrite
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.OpenWrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.FileStream
  commentId: T:System.IO.FileStream
  parent: System.IO
  isExternal: true
  name: FileStream
  nameWithType: FileStream
  fullName: System.IO.FileStream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackup*
  commentId: Overload:Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackup
  name: ReplaceContentsNoBackup
  nameWithType: FileWriterUtilities.ReplaceContentsNoBackup
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackup
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackup(System.String,System.String)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackup(System.String,System.String)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: ReplaceContentsNoBackup(String, String)
  nameWithType: IFileWriterUtilities.ReplaceContentsNoBackup(String, String)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackup(System.String, System.String)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackup(System.String,System.String)
    name: ReplaceContentsNoBackup
    nameWithType: IFileWriterUtilities.ReplaceContentsNoBackup
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackup
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackup(System.String,System.String)
    name: ReplaceContentsNoBackup
    nameWithType: IFileWriterUtilities.ReplaceContentsNoBackup
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackup
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.PlatformNotSupportedException
  commentId: T:System.PlatformNotSupportedException
  isExternal: true
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors*
  commentId: Overload:Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors
  name: ReplaceContentsNoBackupIgnoringMetadataErrors
  nameWithType: FileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors(System.String,System.String)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors(System.String,System.String)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: ReplaceContentsNoBackupIgnoringMetadataErrors(String, String)
  nameWithType: IFileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors(String, String)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors(System.String, System.String)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors(System.String,System.String)
    name: ReplaceContentsNoBackupIgnoringMetadataErrors
    nameWithType: IFileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors(System.String,System.String)
    name: ReplaceContentsNoBackupIgnoringMetadataErrors
    nameWithType: IFileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsNoBackupIgnoringMetadataErrors
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackup*
  commentId: Overload:Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackup
  name: ReplaceContentsWithBackup
  nameWithType: FileWriterUtilities.ReplaceContentsWithBackup
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackup
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackup(System.String,System.String,System.String)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackup(System.String,System.String,System.String)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: ReplaceContentsWithBackup(String, String, String)
  nameWithType: IFileWriterUtilities.ReplaceContentsWithBackup(String, String, String)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackup(System.String, System.String, System.String)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackup(System.String,System.String,System.String)
    name: ReplaceContentsWithBackup
    nameWithType: IFileWriterUtilities.ReplaceContentsWithBackup
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackup
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackup(System.String,System.String,System.String)
    name: ReplaceContentsWithBackup
    nameWithType: IFileWriterUtilities.ReplaceContentsWithBackup
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackup
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors*
  commentId: Overload:Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors
  name: ReplaceContentsWithBackupIgnoringMetadataErrors
  nameWithType: FileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors(System.String,System.String,System.String)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors(System.String,System.String,System.String)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: ReplaceContentsWithBackupIgnoringMetadataErrors(String, String, String)
  nameWithType: IFileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors(String, String, String)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors(System.String, System.String, System.String)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors(System.String,System.String,System.String)
    name: ReplaceContentsWithBackupIgnoringMetadataErrors
    nameWithType: IFileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors(System.String,System.String,System.String)
    name: ReplaceContentsWithBackupIgnoringMetadataErrors
    nameWithType: IFileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.ReplaceContentsWithBackupIgnoringMetadataErrors
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllBytes*
  commentId: Overload:Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllBytes
  name: WriteAllBytes
  nameWithType: FileWriterUtilities.WriteAllBytes
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllBytes
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes(System.String,System.Byte[])
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes(System.String,System.Byte[])
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: WriteAllBytes(String, Byte[])
  nameWithType: IFileWriterUtilities.WriteAllBytes(String, Byte[])
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes(System.String, System.Byte[])
  nameWithType.vb: IFileWriterUtilities.WriteAllBytes(String, Byte())
  fullName.vb: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes(System.String, System.Byte())
  name.vb: WriteAllBytes(String, Byte())
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes(System.String,System.Byte[])
    name: WriteAllBytes
    nameWithType: IFileWriterUtilities.WriteAllBytes
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes(System.String,System.Byte[])
    name: WriteAllBytes
    nameWithType: IFileWriterUtilities.WriteAllBytes
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes(System.String,System.Collections.Immutable.IImmutableList{System.Byte})
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes(System.String,System.Collections.Immutable.IImmutableList{System.Byte})
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: WriteAllBytes(String, IImmutableList<Byte>)
  nameWithType: IFileWriterUtilities.WriteAllBytes(String, IImmutableList<Byte>)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes(System.String, System.Collections.Immutable.IImmutableList<System.Byte>)
  nameWithType.vb: IFileWriterUtilities.WriteAllBytes(String, IImmutableList(Of Byte))
  fullName.vb: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes(System.String, System.Collections.Immutable.IImmutableList(Of System.Byte))
  name.vb: WriteAllBytes(String, IImmutableList(Of Byte))
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes(System.String,System.Collections.Immutable.IImmutableList{System.Byte})
    name: WriteAllBytes
    nameWithType: IFileWriterUtilities.WriteAllBytes
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes(System.String,System.Collections.Immutable.IImmutableList{System.Byte})
    name: WriteAllBytes
    nameWithType: IFileWriterUtilities.WriteAllBytes
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Immutable.IImmutableList{System.Byte}
  commentId: T:System.Collections.Immutable.IImmutableList{System.Byte}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.IImmutableList`1
  name: IImmutableList<Byte>
  nameWithType: IImmutableList<Byte>
  fullName: System.Collections.Immutable.IImmutableList<System.Byte>
  nameWithType.vb: IImmutableList(Of Byte)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of System.Byte)
  name.vb: IImmutableList(Of Byte)
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Immutable.IImmutableList`1
  commentId: T:System.Collections.Immutable.IImmutableList`1
  isExternal: true
  name: IImmutableList<T>
  nameWithType: IImmutableList<T>
  fullName: System.Collections.Immutable.IImmutableList<T>
  nameWithType.vb: IImmutableList(Of T)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T)
  name.vb: IImmutableList(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Immutable
  commentId: N:System.Collections.Immutable
  isExternal: true
  name: System.Collections.Immutable
  nameWithType: System.Collections.Immutable
  fullName: System.Collections.Immutable
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines*
  commentId: Overload:Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines
  name: WriteAllLines
  nameWithType: FileWriterUtilities.WriteAllLines
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllLines
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String,System.String[],System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String,System.String[],System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: WriteAllLines(String, String[], Encoding)
  nameWithType: IFileWriterUtilities.WriteAllLines(String, String[], Encoding)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String, System.String[], System.Text.Encoding)
  nameWithType.vb: IFileWriterUtilities.WriteAllLines(String, String(), Encoding)
  fullName.vb: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String, System.String(), System.Text.Encoding)
  name.vb: WriteAllLines(String, String(), Encoding)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String,System.String[],System.Text.Encoding)
    name: WriteAllLines
    nameWithType: IFileWriterUtilities.WriteAllLines
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String,System.String[],System.Text.Encoding)
    name: WriteAllLines
    nameWithType: IFileWriterUtilities.WriteAllLines
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String,System.Collections.Immutable.IImmutableList{System.String},System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String,System.Collections.Immutable.IImmutableList{System.String},System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: WriteAllLines(String, IImmutableList<String>, Encoding)
  nameWithType: IFileWriterUtilities.WriteAllLines(String, IImmutableList<String>, Encoding)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String, System.Collections.Immutable.IImmutableList<System.String>, System.Text.Encoding)
  nameWithType.vb: IFileWriterUtilities.WriteAllLines(String, IImmutableList(Of String), Encoding)
  fullName.vb: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String, System.Collections.Immutable.IImmutableList(Of System.String), System.Text.Encoding)
  name.vb: WriteAllLines(String, IImmutableList(Of String), Encoding)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String,System.Collections.Immutable.IImmutableList{System.String},System.Text.Encoding)
    name: WriteAllLines
    nameWithType: IFileWriterUtilities.WriteAllLines
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String,System.Collections.Immutable.IImmutableList{System.String},System.Text.Encoding)
    name: WriteAllLines
    nameWithType: IFileWriterUtilities.WriteAllLines
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Immutable.IImmutableList{System.String}
  commentId: T:System.Collections.Immutable.IImmutableList{System.String}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.IImmutableList`1
  name: IImmutableList<String>
  nameWithType: IImmutableList<String>
  fullName: System.Collections.Immutable.IImmutableList<System.String>
  nameWithType.vb: IImmutableList(Of String)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of System.String)
  name.vb: IImmutableList(Of String)
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: WriteAllLines(String, IEnumerable<String>, Encoding)
  nameWithType: IFileWriterUtilities.WriteAllLines(String, IEnumerable<String>, Encoding)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String, System.Collections.Generic.IEnumerable<System.String>, System.Text.Encoding)
  nameWithType.vb: IFileWriterUtilities.WriteAllLines(String, IEnumerable(Of String), Encoding)
  fullName.vb: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.Text.Encoding)
  name.vb: WriteAllLines(String, IEnumerable(Of String), Encoding)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
    name: WriteAllLines
    nameWithType: IFileWriterUtilities.WriteAllLines
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
    name: WriteAllLines
    nameWithType: IFileWriterUtilities.WriteAllLines
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllLines
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllText*
  commentId: Overload:Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllText
  name: WriteAllText
  nameWithType: FileWriterUtilities.WriteAllText
  fullName: Landorphan.Abstractions.IO.FileWriterUtilities.WriteAllText
- uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllText(System.String,System.String,System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllText(System.String,System.String,System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities
  isExternal: true
  name: WriteAllText(String, String, Encoding)
  nameWithType: IFileWriterUtilities.WriteAllText(String, String, Encoding)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllText(System.String, System.String, System.Text.Encoding)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllText(System.String,System.String,System.Text.Encoding)
    name: WriteAllText
    nameWithType: IFileWriterUtilities.WriteAllText
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllText
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllText(System.String,System.String,System.Text.Encoding)
    name: WriteAllText
    nameWithType: IFileWriterUtilities.WriteAllText
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileWriterUtilities.WriteAllText
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
