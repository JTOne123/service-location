### YamlMime:ManagedReference
items:
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc
  commentId: T:Landorphan.Abstractions.Console.Interfaces.IConsoleMisc
  id: IConsoleMisc
  parent: Landorphan.Abstractions.Console.Interfaces
  children:
  - Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.Beep
  - Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.Beep(System.Int32,System.Int32)
  - Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.CancelKeyPress
  - Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.CapsLock
  - Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.NumberLock
  langs:
  - csharp
  - vb
  name: IConsoleMisc
  nameWithType: IConsoleMisc
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc
  type: Interface
  source:
    remote:
      path: source/Landorphan.Abstractions/Console/Interfaces/IConsoleMisc.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: IConsoleMisc
    path: ../../source/Landorphan.Abstractions/Console/Interfaces/IConsoleMisc.cs
    startLine: 7
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.Console.Interfaces
  summary: "\nInterface for console abc.\n"
  example: []
  syntax:
    content: public interface IConsoleMisc
    content.vb: Public Interface IConsoleMisc
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.CancelKeyPress
  commentId: E:Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.CancelKeyPress
  id: CancelKeyPress
  parent: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc
  langs:
  - csharp
  - vb
  name: CancelKeyPress
  nameWithType: IConsoleMisc.CancelKeyPress
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.CancelKeyPress
  type: Event
  source:
    remote:
      path: source/Landorphan.Abstractions/Console/Interfaces/IConsoleMisc.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: CancelKeyPress
    path: ../../source/Landorphan.Abstractions/Console/Interfaces/IConsoleMisc.cs
    startLine: 38
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.Console.Interfaces
  summary: "\nOccurs when the Control modifier key (Ctrl) and either the ConsoleKey.C console key (C) or the Break key are pressed simultaneously (Ctrl+C or\nCtrl+Break).\n"
  remarks: "\n<p>\nThis event is used in conjunction with <xref href=\"System.EventHandler\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.ConsoleCancelEventArgs\" data-throw-if-not-resolved=\"false\"></xref>.  The CancelKeyPress event\nenables a console application to intercept the Ctrl+C signal so the event handler can decide whether to continue executing or terminate.\nFor more information about handling events,\n<a href=\"http://msdn.microsoft.com/en-us/library/edzehd2t(v=vs.110).aspx\">\nHandling and Raising Events\n</a>\n</p>\n<p>\nWhen the user presses either Ctrl+C or Ctrl+Break, the CancelKeyPress event is fired and the application&apos;s\n<xref href=\"System.EventHandler%601\" data-throw-if-not-resolved=\"false\"></xref> event handler is executed.  The event handler is passed a\n<xref href=\"System.ConsoleCancelEventArgs\" data-throw-if-not-resolved=\"false\"></xref> Object that has two useful properties:\n</p>\n• <xref href=\"System.ConsoleCancelEventArgs.SpecialKey\" data-throw-if-not-resolved=\"false\"></xref>, which allows you to determine whether the handler was invoked as a result of the user\npressing Ctrl+C (the property value is ConsoleSpecialKey.ControlC) or Ctrl+Break (the property value is ConsoleSpecialKey.ControlBreak).\n<p>\n• <xref href=\"System.ConsoleCancelEventArgs.Cancel\" data-throw-if-not-resolved=\"false\"></xref>, which allows you to determine how to your application should respond to the user pressing\nCtrl+C or Ctrl+Break.  By default, the Cancel property is false, which causes program execution to terminate when the event handler exits.\nChanging its property to true specifies that the application should continue to execute.\n</p>\n<p>\nThe event handler for this event is executed on a thread pool thread.\n</p>\n"
  example: []
  syntax:
    content: event EventHandler<ConsoleCancelEventArgs> CancelKeyPress
    return:
      type: System.EventHandler{System.ConsoleCancelEventArgs}
    content.vb: Event CancelKeyPress As EventHandler(Of ConsoleCancelEventArgs)
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.CapsLock
  commentId: P:Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.CapsLock
  id: CapsLock
  parent: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc
  langs:
  - csharp
  - vb
  name: CapsLock
  nameWithType: IConsoleMisc.CapsLock
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.CapsLock
  type: Property
  source:
    remote:
      path: source/Landorphan.Abstractions/Console/Interfaces/IConsoleMisc.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: CapsLock
    path: ../../source/Landorphan.Abstractions/Console/Interfaces/IConsoleMisc.cs
    startLine: 46
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.Console.Interfaces
  summary: "\nGets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.\n"
  example: []
  syntax:
    content: bool CapsLock { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code> true </code> if CAPS LOCK is turned on; false if CAPS LOCK is turned <code> off </code>.\n"
    content.vb: ReadOnly Property CapsLock As Boolean
  overload: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.CapsLock*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.NumberLock
  commentId: P:Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.NumberLock
  id: NumberLock
  parent: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc
  langs:
  - csharp
  - vb
  name: NumberLock
  nameWithType: IConsoleMisc.NumberLock
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.NumberLock
  type: Property
  source:
    remote:
      path: source/Landorphan.Abstractions/Console/Interfaces/IConsoleMisc.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: NumberLock
    path: ../../source/Landorphan.Abstractions/Console/Interfaces/IConsoleMisc.cs
    startLine: 54
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.Console.Interfaces
  summary: "\nGets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.\n"
  example: []
  syntax:
    content: bool NumberLock { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code> true </code> if NUM LOCK is turned on; <code> false </code> if NUM LOCK is turned off.\n"
    content.vb: ReadOnly Property NumberLock As Boolean
  overload: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.NumberLock*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.Beep
  commentId: M:Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.Beep
  id: Beep
  parent: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc
  langs:
  - csharp
  - vb
  name: Beep()
  nameWithType: IConsoleMisc.Beep()
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.Beep()
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/Console/Interfaces/IConsoleMisc.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: Beep
    path: ../../source/Landorphan.Abstractions/Console/Interfaces/IConsoleMisc.cs
    startLine: 68
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.Console.Interfaces
  summary: "\nPlays the sound of a beep through the console speaker.\n"
  remarks: "\nBy default, the beep plays at a frequency of 800 hertz for a duration of 200 milliseconds.\nWhether Beep produces a sound on versions of Windows before Windows 7 depends on the\npresence of a 8254 programmable interval timer chip.  Starting with Windows 7, it depends on the default sound device.\n<p>\nIn .Net Framework, this would throw System.Security.HostProtectionException when executed on a server, such as MS SQL Server, that does not permit access to a user interface.\nTODO: find out what exception is thrown in .Net Standard 2.0\n</p>\n"
  example: []
  syntax:
    content: void Beep()
    content.vb: Sub Beep
  overload: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.Beep*
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.Beep(System.Int32,System.Int32)
  commentId: M:Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.Beep(System.Int32,System.Int32)
  id: Beep(System.Int32,System.Int32)
  parent: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc
  langs:
  - csharp
  - vb
  name: Beep(Int32, Int32)
  nameWithType: IConsoleMisc.Beep(Int32, Int32)
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.Beep(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/Console/Interfaces/IConsoleMisc.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: Beep
    path: ../../source/Landorphan.Abstractions/Console/Interfaces/IConsoleMisc.cs
    startLine: 93
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.Console.Interfaces
  summary: "\nPlays the sound of a beep of a specified frequency and duration through the console speaker.\n"
  remarks: "\nBeep wraps a call to the Windows Beep function.\nWhether Beep produces a sound on versions of Windows before Windows 7 depends on the\npresence of a 8254 programmable interval timer chip.  Starting with Windows 7, it depends on the default sound device.\n<p>\nIn .Net Framework, this would throw System.Security.HostProtectionException when executed on a server, such as MS SQL Server, that does not permit access to a user interface.\nTODO: find out what exception is thrown in .Net Standard 2.0\n</p>\n"
  example: []
  syntax:
    content: void Beep(int frequency, int duration)
    parameters:
    - id: frequency
      type: System.Int32
      description: "\nThe frequency of the beep, ranging from 37 to 32767 hertz.\n"
    - id: duration
      type: System.Int32
      description: "\nThe duration of the beep measured in milliseconds.\n"
    content.vb: Sub Beep(frequency As Integer, duration As Integer)
  overload: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.Beep*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em> frequency </em> is less than 37 or more than 32767 hertz.\n-or-\n<em> duration </em> is less than or equal to zero.\n"
references:
- uid: Landorphan.Abstractions.Console.Interfaces
  commentId: N:Landorphan.Abstractions.Console.Interfaces
  name: Landorphan.Abstractions.Console.Interfaces
  nameWithType: Landorphan.Abstractions.Console.Interfaces
  fullName: Landorphan.Abstractions.Console.Interfaces
- uid: System.EventHandler
  commentId: T:System.EventHandler
  isExternal: true
- uid: System.ConsoleCancelEventArgs
  commentId: T:System.ConsoleCancelEventArgs
  isExternal: true
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ConsoleCancelEventArgs.SpecialKey
  commentId: P:System.ConsoleCancelEventArgs.SpecialKey
  isExternal: true
- uid: System.ConsoleCancelEventArgs.Cancel
  commentId: P:System.ConsoleCancelEventArgs.Cancel
  isExternal: true
- uid: System.EventHandler{System.ConsoleCancelEventArgs}
  commentId: T:System.EventHandler{System.ConsoleCancelEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ConsoleCancelEventArgs>
  nameWithType: EventHandler<ConsoleCancelEventArgs>
  fullName: System.EventHandler<System.ConsoleCancelEventArgs>
  nameWithType.vb: EventHandler(Of ConsoleCancelEventArgs)
  fullName.vb: System.EventHandler(Of System.ConsoleCancelEventArgs)
  name.vb: EventHandler(Of ConsoleCancelEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ConsoleCancelEventArgs
    name: ConsoleCancelEventArgs
    nameWithType: ConsoleCancelEventArgs
    fullName: System.ConsoleCancelEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ConsoleCancelEventArgs
    name: ConsoleCancelEventArgs
    nameWithType: ConsoleCancelEventArgs
    fullName: System.ConsoleCancelEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.CapsLock*
  commentId: Overload:Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.CapsLock
  name: CapsLock
  nameWithType: IConsoleMisc.CapsLock
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.CapsLock
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.NumberLock*
  commentId: Overload:Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.NumberLock
  name: NumberLock
  nameWithType: IConsoleMisc.NumberLock
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.NumberLock
- uid: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.Beep*
  commentId: Overload:Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.Beep
  name: Beep
  nameWithType: IConsoleMisc.Beep
  fullName: Landorphan.Abstractions.Console.Interfaces.IConsoleMisc.Beep
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
