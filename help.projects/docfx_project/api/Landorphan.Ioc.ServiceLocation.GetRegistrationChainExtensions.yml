### YamlMime:ManagedReference
items:
- uid: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions
  commentId: T:Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions
  id: GetRegistrationChainExtensions
  parent: Landorphan.Ioc.ServiceLocation
  children:
  - Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository,System.Type)
  - Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository,System.Type,System.String)
  - Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain``1(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository)
  - Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain``1(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository,System.String)
  langs:
  - csharp
  - vb
  name: GetRegistrationChainExtensions
  nameWithType: GetRegistrationChainExtensions
  fullName: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions
  type: Class
  source:
    remote:
      path: source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Extensions/GetRegistrationChainExtensions.cs
      branch: mprochaska.documentation.1
      repo: https://github.com/landorphan/service-location.git
    id: GetRegistrationChainExtensions
    path: ../../source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Extensions/GetRegistrationChainExtensions.cs
    startLine: 13
  assemblies:
  - Landorphan.Ioc.ServiceLocation
  namespace: Landorphan.Ioc.ServiceLocation
  summary: "\nExtension methods for IoC querying the type/name is registration key in the given container, and its chain of parents.\n"
  example: []
  syntax:
    content: public static class GetRegistrationChainExtensions
    content.vb: Public Module GetRegistrationChainExtensions
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain``1(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository)
  commentId: M:Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain``1(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository)
  id: GetRegistrationChain``1(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository)
  isExtensionMethod: true
  parent: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions
  langs:
  - csharp
  - vb
  name: GetRegistrationChain<TFrom>(IIocContainerRegistrationRepository)
  nameWithType: GetRegistrationChainExtensions.GetRegistrationChain<TFrom>(IIocContainerRegistrationRepository)
  fullName: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain<TFrom>(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository)
  type: Method
  source:
    remote:
      path: source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Extensions/GetRegistrationChainExtensions.cs
      branch: mprochaska.documentation.1
      repo: https://github.com/landorphan/service-location.git
    id: GetRegistrationChain
    path: ../../source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Extensions/GetRegistrationChainExtensions.cs
    startLine: 27
  assemblies:
  - Landorphan.Ioc.ServiceLocation
  namespace: Landorphan.Ioc.ServiceLocation
  summary: "\nGets all default registration entries for the given container, and its chain of parents, for the given <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TFrom</code> type.\n"
  example: []
  syntax:
    content: >-
      public static IReadOnlyDictionary<IContainerRegistrationKey, IRegistrationValue> GetRegistrationChain<TFrom>(this IIocContainerRegistrationRepository container)

          where TFrom : class
    parameters:
    - id: container
      type: Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository
      description: "\nThe container (registrar or resolver) to inspect.\n"
    typeParameters:
    - id: TFrom
      description: "\nThe abstract or interface type to check.\n"
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{Landorphan.Ioc.ServiceLocation.Interfaces.IContainerRegistrationKey,Landorphan.Ioc.ServiceLocation.Interfaces.IRegistrationValue}
      description: "\nA non-null collection of zero or more matching entries.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRegistrationChain(Of TFrom As Class)(container As IIocContainerRegistrationRepository) As IReadOnlyDictionary(Of IContainerRegistrationKey, IRegistrationValue)
  overload: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain*
  nameWithType.vb: GetRegistrationChainExtensions.GetRegistrationChain(Of TFrom)(IIocContainerRegistrationRepository)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain(Of TFrom)(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository)
  name.vb: GetRegistrationChain(Of TFrom)(IIocContainerRegistrationRepository)
- uid: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain``1(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository,System.String)
  commentId: M:Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain``1(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository,System.String)
  id: GetRegistrationChain``1(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository,System.String)
  isExtensionMethod: true
  parent: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions
  langs:
  - csharp
  - vb
  name: GetRegistrationChain<TFrom>(IIocContainerRegistrationRepository, String)
  nameWithType: GetRegistrationChainExtensions.GetRegistrationChain<TFrom>(IIocContainerRegistrationRepository, String)
  fullName: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain<TFrom>(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository, System.String)
  type: Method
  source:
    remote:
      path: source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Extensions/GetRegistrationChainExtensions.cs
      branch: mprochaska.documentation.1
      repo: https://github.com/landorphan/service-location.git
    id: GetRegistrationChain
    path: ../../source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Extensions/GetRegistrationChainExtensions.cs
    startLine: 48
  assemblies:
  - Landorphan.Ioc.ServiceLocation
  namespace: Landorphan.Ioc.ServiceLocation
  summary: "\nGets all named registration entries for the given container, and its chain of parents, for the given <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TFrom</code> type and <code data-dev-comment-type=\"paramref\" class=\"paramref\">name</code> name.\n"
  example: []
  syntax:
    content: >-
      public static IReadOnlyDictionary<IContainerRegistrationKey, IRegistrationValue> GetRegistrationChain<TFrom>(this IIocContainerRegistrationRepository container, string name)

          where TFrom : class
    parameters:
    - id: container
      type: Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository
      description: "\nThe container (registrar or resolver) to inspect.\n"
    - id: name
      type: System.String
      description: "\nThe name to check, use <code> null </code> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> or whitespace to check for the default registration of the given type.\n"
    typeParameters:
    - id: TFrom
      description: "\nThe abstract or interface type to check.\n"
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{Landorphan.Ioc.ServiceLocation.Interfaces.IContainerRegistrationKey,Landorphan.Ioc.ServiceLocation.Interfaces.IRegistrationValue}
      description: "\nA non-null collection of zero or more matching entries.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRegistrationChain(Of TFrom As Class)(container As IIocContainerRegistrationRepository, name As String) As IReadOnlyDictionary(Of IContainerRegistrationKey, IRegistrationValue)
  overload: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain*
  nameWithType.vb: GetRegistrationChainExtensions.GetRegistrationChain(Of TFrom)(IIocContainerRegistrationRepository, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain(Of TFrom)(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository, System.String)
  name.vb: GetRegistrationChain(Of TFrom)(IIocContainerRegistrationRepository, String)
- uid: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository,System.Type)
  commentId: M:Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository,System.Type)
  id: GetRegistrationChain(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository,System.Type)
  isExtensionMethod: true
  parent: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions
  langs:
  - csharp
  - vb
  name: GetRegistrationChain(IIocContainerRegistrationRepository, Type)
  nameWithType: GetRegistrationChainExtensions.GetRegistrationChain(IIocContainerRegistrationRepository, Type)
  fullName: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository, System.Type)
  type: Method
  source:
    remote:
      path: source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Extensions/GetRegistrationChainExtensions.cs
      branch: mprochaska.documentation.1
      repo: https://github.com/landorphan/service-location.git
    id: GetRegistrationChain
    path: ../../source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Extensions/GetRegistrationChainExtensions.cs
    startLine: 94
  assemblies:
  - Landorphan.Ioc.ServiceLocation
  namespace: Landorphan.Ioc.ServiceLocation
  summary: "\nGets all default registration entries for the given container, and its chain of parents, for the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">fromType</code> type.\n"
  example: []
  syntax:
    content: public static IReadOnlyDictionary<IContainerRegistrationKey, IRegistrationValue> GetRegistrationChain(this IIocContainerRegistrationRepository container, Type fromType)
    parameters:
    - id: container
      type: Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository
      description: "\nThe container (registrar or resolver) to inspect.\n"
    - id: fromType
      type: System.Type
      description: "\nThe abstract or interface type to check.\n"
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{Landorphan.Ioc.ServiceLocation.Interfaces.IContainerRegistrationKey,Landorphan.Ioc.ServiceLocation.Interfaces.IRegistrationValue}
      description: "\nA non-null collection of zero or more matching entries.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRegistrationChain(container As IIocContainerRegistrationRepository, fromType As Type) As IReadOnlyDictionary(Of IContainerRegistrationKey, IRegistrationValue)
  overload: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository,System.Type,System.String)
  commentId: M:Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository,System.Type,System.String)
  id: GetRegistrationChain(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository,System.Type,System.String)
  isExtensionMethod: true
  parent: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions
  langs:
  - csharp
  - vb
  name: GetRegistrationChain(IIocContainerRegistrationRepository, Type, String)
  nameWithType: GetRegistrationChainExtensions.GetRegistrationChain(IIocContainerRegistrationRepository, Type, String)
  fullName: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain(Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository, System.Type, System.String)
  type: Method
  source:
    remote:
      path: source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Extensions/GetRegistrationChainExtensions.cs
      branch: mprochaska.documentation.1
      repo: https://github.com/landorphan/service-location.git
    id: GetRegistrationChain
    path: ../../source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Extensions/GetRegistrationChainExtensions.cs
    startLine: 116
  assemblies:
  - Landorphan.Ioc.ServiceLocation
  namespace: Landorphan.Ioc.ServiceLocation
  summary: "\nGets all named registration entries for the given container, and its chain of parents, for the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">fromType</code> type and <code data-dev-comment-type=\"paramref\" class=\"paramref\">name</code> name.\n"
  example: []
  syntax:
    content: public static IReadOnlyDictionary<IContainerRegistrationKey, IRegistrationValue> GetRegistrationChain(this IIocContainerRegistrationRepository container, Type fromType, string name)
    parameters:
    - id: container
      type: Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository
      description: "\nThe container (registrar or resolver) to inspect.\n"
    - id: fromType
      type: System.Type
      description: "\nThe abstract or interface type to check.\n"
    - id: name
      type: System.String
      description: "\nThe name to check, use <code> null </code> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> or whitespace to check for the default registration of the given type.\n"
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{Landorphan.Ioc.ServiceLocation.Interfaces.IContainerRegistrationKey,Landorphan.Ioc.ServiceLocation.Interfaces.IRegistrationValue}
      description: "\nA non-null collection of zero or more matching entries.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRegistrationChain(container As IIocContainerRegistrationRepository, fromType As Type, name As String) As IReadOnlyDictionary(Of IContainerRegistrationKey, IRegistrationValue)
  overload: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Landorphan.Ioc.ServiceLocation
  commentId: N:Landorphan.Ioc.ServiceLocation
  name: Landorphan.Ioc.ServiceLocation
  nameWithType: Landorphan.Ioc.ServiceLocation
  fullName: Landorphan.Ioc.ServiceLocation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain*
  commentId: Overload:Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain
  name: GetRegistrationChain
  nameWithType: GetRegistrationChainExtensions.GetRegistrationChain
  fullName: Landorphan.Ioc.ServiceLocation.GetRegistrationChainExtensions.GetRegistrationChain
- uid: Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository
  commentId: T:Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository
  parent: Landorphan.Ioc.ServiceLocation.Interfaces
  name: IIocContainerRegistrationRepository
  nameWithType: IIocContainerRegistrationRepository
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IIocContainerRegistrationRepository
- uid: System.Collections.Generic.IReadOnlyDictionary{Landorphan.Ioc.ServiceLocation.Interfaces.IContainerRegistrationKey,Landorphan.Ioc.ServiceLocation.Interfaces.IRegistrationValue}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{Landorphan.Ioc.ServiceLocation.Interfaces.IContainerRegistrationKey,Landorphan.Ioc.ServiceLocation.Interfaces.IRegistrationValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<IContainerRegistrationKey, IRegistrationValue>
  nameWithType: IReadOnlyDictionary<IContainerRegistrationKey, IRegistrationValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<Landorphan.Ioc.ServiceLocation.Interfaces.IContainerRegistrationKey, Landorphan.Ioc.ServiceLocation.Interfaces.IRegistrationValue>
  nameWithType.vb: IReadOnlyDictionary(Of IContainerRegistrationKey, IRegistrationValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of Landorphan.Ioc.ServiceLocation.Interfaces.IContainerRegistrationKey, Landorphan.Ioc.ServiceLocation.Interfaces.IRegistrationValue)
  name.vb: IReadOnlyDictionary(Of IContainerRegistrationKey, IRegistrationValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Landorphan.Ioc.ServiceLocation.Interfaces.IContainerRegistrationKey
    name: IContainerRegistrationKey
    nameWithType: IContainerRegistrationKey
    fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IContainerRegistrationKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Landorphan.Ioc.ServiceLocation.Interfaces.IRegistrationValue
    name: IRegistrationValue
    nameWithType: IRegistrationValue
    fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IRegistrationValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Landorphan.Ioc.ServiceLocation.Interfaces.IContainerRegistrationKey
    name: IContainerRegistrationKey
    nameWithType: IContainerRegistrationKey
    fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IContainerRegistrationKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Landorphan.Ioc.ServiceLocation.Interfaces.IRegistrationValue
    name: IRegistrationValue
    nameWithType: IRegistrationValue
    fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IRegistrationValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Landorphan.Ioc.ServiceLocation.Interfaces
  commentId: N:Landorphan.Ioc.ServiceLocation.Interfaces
  name: Landorphan.Ioc.ServiceLocation.Interfaces
  nameWithType: Landorphan.Ioc.ServiceLocation.Interfaces
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String.Empty
  commentId: F:System.String.Empty
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
