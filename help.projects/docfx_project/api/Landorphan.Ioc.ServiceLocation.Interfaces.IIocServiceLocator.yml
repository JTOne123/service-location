### YamlMime:ManagedReference
items:
- uid: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator
  commentId: T:Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator
  id: IIocServiceLocator
  parent: Landorphan.Ioc.ServiceLocation.Interfaces
  children:
  - Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve(System.Type)
  - Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve(System.Type,System.String)
  - Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve``1
  - Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve``1(System.String)
  - Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve(System.Type,System.Object@)
  - Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve(System.Type,System.String,System.Object@)
  - Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve``1(``0@)
  - Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve``1(System.String,``0@)
  langs:
  - csharp
  - vb
  name: IIocServiceLocator
  nameWithType: IIocServiceLocator
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator
  type: Interface
  source:
    remote:
      path: source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: IIocServiceLocator
    path: ../../source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
    startLine: 9
  assemblies:
  - Landorphan.Ioc.ServiceLocation
  namespace: Landorphan.Ioc.ServiceLocation.Interfaces
  summary: "\nRepresents the client interface for service location.\n"
  example: []
  syntax:
    content: 'public interface IIocServiceLocator : IServiceProvider, IIocServiceLocatorMetaSharedCapacities'
    content.vb: >-
      Public Interface IIocServiceLocator
          Inherits IServiceProvider, IIocServiceLocatorMetaSharedCapacities
  seealso:
  - linkId: System.IServiceProvider
    commentId: T:System.IServiceProvider
  inheritedMembers:
  - System.IServiceProvider.GetService(System.Type)
  - Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocatorMetaSharedCapacities.Manager
  - Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocatorMetaSharedCapacities.ServiceLocator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve``1
  commentId: M:Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve``1
  id: Resolve``1
  parent: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator
  langs:
  - csharp
  - vb
  name: Resolve<TFrom>()
  nameWithType: IIocServiceLocator.Resolve<TFrom>()
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve<TFrom>()
  type: Method
  source:
    remote:
      path: source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: Resolve
    path: ../../source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
    startLine: 23
  assemblies:
  - Landorphan.Ioc.ServiceLocation
  namespace: Landorphan.Ioc.ServiceLocation.Interfaces
  summary: "\nResolves the default instance of the requested type.\n"
  example: []
  syntax:
    content: >-
      TFrom Resolve<TFrom>()
          where TFrom : class
    typeParameters:
    - id: TFrom
      description: "\nThe requested service interface type\n"
    return:
      type: '{TFrom}'
      description: "\nThe default implementation instance.\n"
    content.vb: Function Resolve(Of TFrom As Class) As TFrom
  overload: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve*
  exceptions:
  - type: Landorphan.Ioc.ServiceLocation.Exceptions.ResolutionException
    commentId: T:Landorphan.Ioc.ServiceLocation.Exceptions.ResolutionException
    description: "\nThrown when an error occurs resolving the <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TFrom</code> service default instance.\n"
  nameWithType.vb: IIocServiceLocator.Resolve(Of TFrom)()
  fullName.vb: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve(Of TFrom)()
  name.vb: Resolve(Of TFrom)()
- uid: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve``1(System.String)
  commentId: M:Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve``1(System.String)
  id: Resolve``1(System.String)
  parent: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator
  langs:
  - csharp
  - vb
  name: Resolve<TFrom>(String)
  nameWithType: IIocServiceLocator.Resolve<TFrom>(String)
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve<TFrom>(System.String)
  type: Method
  source:
    remote:
      path: source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: Resolve
    path: ../../source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
    startLine: 40
  assemblies:
  - Landorphan.Ioc.ServiceLocation
  namespace: Landorphan.Ioc.ServiceLocation.Interfaces
  summary: "\nResolves a named instance of the requested type.\n"
  example: []
  syntax:
    content: >-
      TFrom Resolve<TFrom>(string name)
          where TFrom : class
    parameters:
    - id: name
      type: System.String
      description: "\nThe name of the instance to retrieve, null or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> for the default instance.\n"
    typeParameters:
    - id: TFrom
      description: "\nThe requested service interface type.\n"
    return:
      type: '{TFrom}'
      description: "\nThe retrieved instance.\n"
    content.vb: Function Resolve(Of TFrom As Class)(name As String) As TFrom
  overload: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve*
  exceptions:
  - type: Landorphan.Ioc.ServiceLocation.Exceptions.ResolutionException
    commentId: T:Landorphan.Ioc.ServiceLocation.Exceptions.ResolutionException
    description: "\nThrown when an error occurs resolving the <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TFrom</code> service instance.\n"
  nameWithType.vb: IIocServiceLocator.Resolve(Of TFrom)(String)
  fullName.vb: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve(Of TFrom)(System.String)
  name.vb: Resolve(Of TFrom)(String)
- uid: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve(System.Type)
  commentId: M:Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve(System.Type)
  id: Resolve(System.Type)
  parent: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator
  langs:
  - csharp
  - vb
  name: Resolve(Type)
  nameWithType: IIocServiceLocator.Resolve(Type)
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve(System.Type)
  type: Method
  source:
    remote:
      path: source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: Resolve
    path: ../../source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
    startLine: 54
  assemblies:
  - Landorphan.Ioc.ServiceLocation
  namespace: Landorphan.Ioc.ServiceLocation.Interfaces
  summary: "\nResolves the default instance of the requested type.\n"
  example: []
  syntax:
    content: object Resolve(Type fromType)
    parameters:
    - id: fromType
      type: System.Type
      description: "\nThe requested type.\n"
    return:
      type: System.Object
      description: "\nThe retrieved instance.\n"
    content.vb: Function Resolve(fromType As Type) As Object
  overload: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve*
  exceptions:
  - type: Landorphan.Ioc.ServiceLocation.Exceptions.ResolutionException
    commentId: T:Landorphan.Ioc.ServiceLocation.Exceptions.ResolutionException
    description: "\nThrown when an error occurs resolving the <code data-dev-comment-type=\"paramref\" class=\"paramref\">fromType</code> service instance.\n"
- uid: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve(System.Type,System.String)
  commentId: M:Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve(System.Type,System.String)
  id: Resolve(System.Type,System.String)
  parent: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator
  langs:
  - csharp
  - vb
  name: Resolve(Type, String)
  nameWithType: IIocServiceLocator.Resolve(Type, String)
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve(System.Type, System.String)
  type: Method
  source:
    remote:
      path: source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: Resolve
    path: ../../source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
    startLine: 71
  assemblies:
  - Landorphan.Ioc.ServiceLocation
  namespace: Landorphan.Ioc.ServiceLocation.Interfaces
  summary: "\nResolves a named instance of the requested type.\n"
  example: []
  syntax:
    content: object Resolve(Type fromType, string name)
    parameters:
    - id: fromType
      type: System.Type
      description: "\nThe requested service interface type.\n"
    - id: name
      type: System.String
      description: "\nThe name of the instance to retrieve, specify null or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> to retrieve the default instance.\n"
    return:
      type: System.Object
      description: "\nThe retrieved instance.\n"
    content.vb: Function Resolve(fromType As Type, name As String) As Object
  overload: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve*
  exceptions:
  - type: Landorphan.Ioc.ServiceLocation.Exceptions.ResolutionException
    commentId: T:Landorphan.Ioc.ServiceLocation.Exceptions.ResolutionException
    description: "\nThrown when an error occurs resolving the named <code data-dev-comment-type=\"paramref\" class=\"paramref\">fromType</code> service instance.\n"
- uid: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve``1(``0@)
  commentId: M:Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve``1(``0@)
  id: TryResolve``1(``0@)
  parent: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator
  langs:
  - csharp
  - vb
  name: TryResolve<TFrom>(out TFrom)
  nameWithType: IIocServiceLocator.TryResolve<TFrom>(out TFrom)
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve<TFrom>(out TFrom)
  type: Method
  source:
    remote:
      path: source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: TryResolve
    path: ../../source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
    startLine: 85
  assemblies:
  - Landorphan.Ioc.ServiceLocation
  namespace: Landorphan.Ioc.ServiceLocation.Interfaces
  summary: "\nAttempts to resolve the default instance of the requested type.\n"
  example: []
  syntax:
    content: >-
      bool TryResolve<TFrom>(out TFrom instance)
          where TFrom : class
    parameters:
    - id: instance
      type: '{TFrom}'
      description: "\nThe default registered instance when found; otherwise a null reference.\n"
    typeParameters:
    - id: TFrom
      description: "\nThe requested service interface type.\n"
    return:
      type: System.Boolean
      description: "\n<code>true</code> when a default registered instance was found; otherwise <code>false</code>.\n"
    content.vb: Function TryResolve(Of TFrom As Class)(ByRef instance As TFrom) As Boolean
  overload: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve*
  nameWithType.vb: IIocServiceLocator.TryResolve(Of TFrom)(ByRef TFrom)
  fullName.vb: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve(Of TFrom)(ByRef TFrom)
  name.vb: TryResolve(Of TFrom)(ByRef TFrom)
- uid: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve``1(System.String,``0@)
  commentId: M:Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve``1(System.String,``0@)
  id: TryResolve``1(System.String,``0@)
  parent: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator
  langs:
  - csharp
  - vb
  name: TryResolve<TFrom>(String, out TFrom)
  nameWithType: IIocServiceLocator.TryResolve<TFrom>(String, out TFrom)
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve<TFrom>(System.String, out TFrom)
  type: Method
  source:
    remote:
      path: source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: TryResolve
    path: ../../source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
    startLine: 102
  assemblies:
  - Landorphan.Ioc.ServiceLocation
  namespace: Landorphan.Ioc.ServiceLocation.Interfaces
  summary: "\nResolves a named instance of the requested type.\n"
  example: []
  syntax:
    content: >-
      bool TryResolve<TFrom>(string name, out TFrom instance)
          where TFrom : class
    parameters:
    - id: name
      type: System.String
      description: "\nThe name of the instance to retrieve, specify null or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> to retrieve the default instance.\n"
    - id: instance
      type: '{TFrom}'
      description: "\nThe named registered instance when found; otherwise a null reference.\n"
    typeParameters:
    - id: TFrom
      description: "\nThe requested service interface type.\n"
    return:
      type: System.Boolean
      description: "\n<code>true</code> when the named registered instance was found; otherwise <code>false</code>.\n"
    content.vb: Function TryResolve(Of TFrom As Class)(name As String, ByRef instance As TFrom) As Boolean
  overload: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve*
  nameWithType.vb: IIocServiceLocator.TryResolve(Of TFrom)(String, ByRef TFrom)
  fullName.vb: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve(Of TFrom)(System.String, ByRef TFrom)
  name.vb: TryResolve(Of TFrom)(String, ByRef TFrom)
- uid: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve(System.Type,System.Object@)
  commentId: M:Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve(System.Type,System.Object@)
  id: TryResolve(System.Type,System.Object@)
  parent: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator
  langs:
  - csharp
  - vb
  name: TryResolve(Type, out Object)
  nameWithType: IIocServiceLocator.TryResolve(Type, out Object)
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve(System.Type, out System.Object)
  type: Method
  source:
    remote:
      path: source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: TryResolve
    path: ../../source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
    startLine: 116
  assemblies:
  - Landorphan.Ioc.ServiceLocation
  namespace: Landorphan.Ioc.ServiceLocation.Interfaces
  summary: "\nAttempts to resolve the default instance of the requested type.\n"
  example: []
  syntax:
    content: bool TryResolve(Type fromType, out object instance)
    parameters:
    - id: fromType
      type: System.Type
      description: "\nThe requested service interface type.\n"
    - id: instance
      type: System.Object
      description: "\nThe default registered instance when found; otherwise a null reference.\n"
    return:
      type: System.Boolean
      description: "\n<code>true</code> when a default registered instance was found; otherwise <code>false</code>.\n"
    content.vb: Function TryResolve(fromType As Type, ByRef instance As Object) As Boolean
  overload: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve*
  nameWithType.vb: IIocServiceLocator.TryResolve(Type, ByRef Object)
  fullName.vb: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve(System.Type, ByRef System.Object)
  name.vb: TryResolve(Type, ByRef Object)
- uid: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve(System.Type,System.String,System.Object@)
  commentId: M:Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve(System.Type,System.String,System.Object@)
  id: TryResolve(System.Type,System.String,System.Object@)
  parent: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator
  langs:
  - csharp
  - vb
  name: TryResolve(Type, String, out Object)
  nameWithType: IIocServiceLocator.TryResolve(Type, String, out Object)
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve(System.Type, System.String, out System.Object)
  type: Method
  source:
    remote:
      path: source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: TryResolve
    path: ../../source/Landorphan.Ioc.ServiceLocation/ServiceLocation/Interfaces/ServiceLocator/IIocServiceLocator.cs
    startLine: 133
  assemblies:
  - Landorphan.Ioc.ServiceLocation
  namespace: Landorphan.Ioc.ServiceLocation.Interfaces
  summary: "\nResolves a named instance of the requested type.\n"
  example: []
  syntax:
    content: bool TryResolve(Type fromType, string name, out object instance)
    parameters:
    - id: fromType
      type: System.Type
      description: "\nThe requested service interface type.\n"
    - id: name
      type: System.String
      description: "\nThe name of the instance to retrieve, specify null or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> to retrieve the default instance.\n"
    - id: instance
      type: System.Object
      description: "\nThe named registered instance when found; otherwise a null reference.\n"
    return:
      type: System.Boolean
      description: "\n<code>true</code> when the named registered instance was found; otherwise <code>false</code>.\n"
    content.vb: Function TryResolve(fromType As Type, name As String, ByRef instance As Object) As Boolean
  overload: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve*
  nameWithType.vb: IIocServiceLocator.TryResolve(Type, String, ByRef Object)
  fullName.vb: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve(System.Type, System.String, ByRef System.Object)
  name.vb: TryResolve(Type, String, ByRef Object)
references:
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Landorphan.Ioc.ServiceLocation.Interfaces
  commentId: N:Landorphan.Ioc.ServiceLocation.Interfaces
  name: Landorphan.Ioc.ServiceLocation.Interfaces
  nameWithType: Landorphan.Ioc.ServiceLocation.Interfaces
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces
- uid: System.IServiceProvider.GetService(System.Type)
  commentId: M:System.IServiceProvider.GetService(System.Type)
  parent: System.IServiceProvider
  isExternal: true
  name: GetService(Type)
  nameWithType: IServiceProvider.GetService(Type)
  fullName: System.IServiceProvider.GetService(System.Type)
  spec.csharp:
  - uid: System.IServiceProvider.GetService(System.Type)
    name: GetService
    nameWithType: IServiceProvider.GetService
    fullName: System.IServiceProvider.GetService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IServiceProvider.GetService(System.Type)
    name: GetService
    nameWithType: IServiceProvider.GetService
    fullName: System.IServiceProvider.GetService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocatorMetaSharedCapacities.Manager
  commentId: P:Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocatorMetaSharedCapacities.Manager
  parent: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocatorMetaSharedCapacities
  name: Manager
  nameWithType: IIocServiceLocatorMetaSharedCapacities.Manager
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocatorMetaSharedCapacities.Manager
- uid: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocatorMetaSharedCapacities.ServiceLocator
  commentId: P:Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocatorMetaSharedCapacities.ServiceLocator
  parent: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocatorMetaSharedCapacities
  name: ServiceLocator
  nameWithType: IIocServiceLocatorMetaSharedCapacities.ServiceLocator
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocatorMetaSharedCapacities.ServiceLocator
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocatorMetaSharedCapacities
  commentId: T:Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocatorMetaSharedCapacities
  parent: Landorphan.Ioc.ServiceLocation.Interfaces
  name: IIocServiceLocatorMetaSharedCapacities
  nameWithType: IIocServiceLocatorMetaSharedCapacities
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocatorMetaSharedCapacities
- uid: Landorphan.Ioc.ServiceLocation.Exceptions.ResolutionException
  commentId: T:Landorphan.Ioc.ServiceLocation.Exceptions.ResolutionException
  name: ResolutionException
  nameWithType: ResolutionException
  fullName: Landorphan.Ioc.ServiceLocation.Exceptions.ResolutionException
- uid: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve*
  commentId: Overload:Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve
  name: Resolve
  nameWithType: IIocServiceLocator.Resolve
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.Resolve
- uid: '{TFrom}'
  commentId: '!:TFrom'
  definition: TFrom
  name: TFrom
  nameWithType: TFrom
  fullName: TFrom
- uid: TFrom
  name: TFrom
  nameWithType: TFrom
  fullName: TFrom
- uid: System.String.Empty
  commentId: F:System.String.Empty
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve*
  commentId: Overload:Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve
  name: TryResolve
  nameWithType: IIocServiceLocator.TryResolve
  fullName: Landorphan.Ioc.ServiceLocation.Interfaces.IIocServiceLocator.TryResolve
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
