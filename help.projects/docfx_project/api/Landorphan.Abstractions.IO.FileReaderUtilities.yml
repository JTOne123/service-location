### YamlMime:ManagedReference
items:
- uid: Landorphan.Abstractions.IO.FileReaderUtilities
  commentId: T:Landorphan.Abstractions.IO.FileReaderUtilities
  id: FileReaderUtilities
  parent: Landorphan.Abstractions.IO
  children:
  - Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllBytes(System.String)
  - Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllLines(System.String,System.Text.Encoding)
  - Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllText(System.String,System.Text.Encoding)
  langs:
  - csharp
  - vb
  name: FileReaderUtilities
  nameWithType: FileReaderUtilities
  fullName: Landorphan.Abstractions.IO.FileReaderUtilities
  type: Class
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileReaderUtilities.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: FileReaderUtilities
    path: ../../source/Landorphan.Abstractions/IO/FileReaderUtilities.cs
    startLine: 12
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nDefault implementation of <xref href=\"Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public sealed class FileReaderUtilities : IFileReaderUtilities'
    content.vb: >-
      Public NotInheritable Class FileReaderUtilities
          Implements IFileReaderUtilities
  inheritance:
  - System.Object
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllBytes(System.String)
  commentId: M:Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllBytes(System.String)
  id: ReadAllBytes(System.String)
  parent: Landorphan.Abstractions.IO.FileReaderUtilities
  langs:
  - csharp
  - vb
  name: ReadAllBytes(String)
  nameWithType: FileReaderUtilities.ReadAllBytes(String)
  fullName: Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllBytes(System.String)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileReaderUtilities.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: ReadAllBytes
    path: ../../source/Landorphan.Abstractions/IO/FileReaderUtilities.cs
    startLine: 15
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nOpens a binary file, reads the contents of the file into a byte array, and then closes the file.\n"
  example: []
  syntax:
    content: public IImmutableList<byte> ReadAllBytes(string path)
    parameters:
    - id: path
      type: System.String
      description: "\nThe file to open for reading.\n"
    return:
      type: System.Collections.Immutable.IImmutableList{System.Byte}
      description: "\nA list of byte containing the contents of the file.\n"
    content.vb: Public Function ReadAllBytes(path As String) As IImmutableList(Of Byte)
  overload: Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllBytes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is a zero-length string, contains only white space, or contains one or\nmore invalid characters as defined by\n<xref href=\"Landorphan.Abstractions.IO.Interfaces.IPathUtilities.GetInvalidPathCharacters\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is null.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\nThe specified path is invalid (for example, it is on an unmapped drive).\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurred while opening the file.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\nThis operation is not supported on the current platform.-or- <code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code>\nspecified a directory.-or- The caller does not have the required permission.\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\nThe file specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> was not found.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is in an invalid format.\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThe caller does not have the required permission.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllBytes(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllLines(System.String,System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllLines(System.String,System.Text.Encoding)
  id: ReadAllLines(System.String,System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.FileReaderUtilities
  langs:
  - csharp
  - vb
  name: ReadAllLines(String, Encoding)
  nameWithType: FileReaderUtilities.ReadAllLines(String, Encoding)
  fullName: Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllLines(System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileReaderUtilities.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: ReadAllLines
    path: ../../source/Landorphan.Abstractions/IO/FileReaderUtilities.cs
    startLine: 22
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nOpens a file, reads all lines of the file with the specified encoding, and then closes the file.\n"
  example: []
  syntax:
    content: public IImmutableList<string> ReadAllLines(string path, Encoding encoding)
    parameters:
    - id: path
      type: System.String
      description: "\nThe file to open for reading.\n"
    - id: encoding
      type: System.Text.Encoding
      description: "\nThe encoding applied to the contents of the file.\n"
    return:
      type: System.Collections.Immutable.IImmutableList{System.String}
      description: "\nA list containing all lines of the file.\n"
    content.vb: Public Function ReadAllLines(path As String, encoding As Encoding) As IImmutableList(Of String)
  overload: Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is a zero-length string, contains only white space, or contains one or\nmore invalid characters as defined by\n<xref href=\"Landorphan.Abstractions.IO.Interfaces.IPathUtilities.GetInvalidPathCharacters\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is null.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\nThe specified path is invalid (for example, it is on an unmapped drive).\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurred while opening the file.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a file that is read-only.-or- This operation is not\nsupported on the current platform.-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a directory.-or- The caller does not have the\nrequired permission.\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\nThe file specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> was not found.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is in an invalid format.\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThe caller does not have the required permission.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllLines(System.String,System.Text.Encoding)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllText(System.String,System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllText(System.String,System.Text.Encoding)
  id: ReadAllText(System.String,System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.FileReaderUtilities
  langs:
  - csharp
  - vb
  name: ReadAllText(String, Encoding)
  nameWithType: FileReaderUtilities.ReadAllText(String, Encoding)
  fullName: Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllText(System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: source/Landorphan.Abstractions/IO/FileReaderUtilities.cs
      branch: mprochaska.restore.abstraction.tests
      repo: https://github.com/landorphan/service-location.git
    id: ReadAllText
    path: ../../source/Landorphan.Abstractions/IO/FileReaderUtilities.cs
    startLine: 29
  assemblies:
  - Landorphan.Abstractions
  namespace: Landorphan.Abstractions.IO
  summary: "\nOpens a file, reads all lines of the file with the specified encoding, and then closes the file.\n"
  example: []
  syntax:
    content: public string ReadAllText(string path, Encoding encoding)
    parameters:
    - id: path
      type: System.String
      description: "\nThe file to open for reading.\n"
    - id: encoding
      type: System.Text.Encoding
      description: "\nThe encoding applied to the contents of the file.\n"
    return:
      type: System.String
      description: "\nA string containing all lines of the file.\n"
    content.vb: Public Function ReadAllText(path As String, encoding As Encoding) As String
  overload: Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is a zero-length string, contains only white space, or contains one or\nmore invalid characters as defined by\n<xref href=\"Landorphan.Abstractions.IO.Interfaces.IPathUtilities.GetInvalidPathCharacters\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is null.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\nThe specified path is invalid (for example, it is on an unmapped drive).\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\nAn I/O error occurred while opening the file.\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a file that is read-only.-or- This operation is not\nsupported on the current platform.-or-\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> specified a directory.-or- The caller does not have the\nrequired permission.\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\nThe file specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> was not found.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">path</code> is in an invalid format.\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThe caller does not have the required permission.\n"
  implements:
  - Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllText(System.String,System.Text.Encoding)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities
  commentId: T:Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities
  parent: Landorphan.Abstractions.IO.Interfaces
  name: IFileReaderUtilities
  nameWithType: IFileReaderUtilities
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities
- uid: Landorphan.Abstractions.IO
  commentId: N:Landorphan.Abstractions.IO
  name: Landorphan.Abstractions.IO
  nameWithType: Landorphan.Abstractions.IO
  fullName: Landorphan.Abstractions.IO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Landorphan.Abstractions.IO.Interfaces
  commentId: N:Landorphan.Abstractions.IO.Interfaces
  name: Landorphan.Abstractions.IO.Interfaces
  nameWithType: Landorphan.Abstractions.IO.Interfaces
  fullName: Landorphan.Abstractions.IO.Interfaces
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllBytes*
  commentId: Overload:Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllBytes
  name: ReadAllBytes
  nameWithType: FileReaderUtilities.ReadAllBytes
  fullName: Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllBytes
- uid: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllBytes(System.String)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllBytes(System.String)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities
  isExternal: true
  name: ReadAllBytes(String)
  nameWithType: IFileReaderUtilities.ReadAllBytes(String)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllBytes(System.String)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllBytes(System.String)
    name: ReadAllBytes
    nameWithType: IFileReaderUtilities.ReadAllBytes
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllBytes(System.String)
    name: ReadAllBytes
    nameWithType: IFileReaderUtilities.ReadAllBytes
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.IO.PathTooLongException
  commentId: T:System.IO.PathTooLongException
  isExternal: true
- uid: System.IO.DirectoryNotFoundException
  commentId: T:System.IO.DirectoryNotFoundException
  isExternal: true
- uid: System.IO.IOException
  commentId: T:System.IO.IOException
  isExternal: true
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
  isExternal: true
- uid: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
  isExternal: true
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  isExternal: true
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Immutable.IImmutableList{System.Byte}
  commentId: T:System.Collections.Immutable.IImmutableList{System.Byte}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.IImmutableList`1
  name: IImmutableList<Byte>
  nameWithType: IImmutableList<Byte>
  fullName: System.Collections.Immutable.IImmutableList<System.Byte>
  nameWithType.vb: IImmutableList(Of Byte)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of System.Byte)
  name.vb: IImmutableList(Of Byte)
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Immutable.IImmutableList`1
  commentId: T:System.Collections.Immutable.IImmutableList`1
  isExternal: true
  name: IImmutableList<T>
  nameWithType: IImmutableList<T>
  fullName: System.Collections.Immutable.IImmutableList<T>
  nameWithType.vb: IImmutableList(Of T)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of T)
  name.vb: IImmutableList(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Immutable
  commentId: N:System.Collections.Immutable
  isExternal: true
  name: System.Collections.Immutable
  nameWithType: System.Collections.Immutable
  fullName: System.Collections.Immutable
- uid: Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllLines*
  commentId: Overload:Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllLines
  name: ReadAllLines
  nameWithType: FileReaderUtilities.ReadAllLines
  fullName: Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllLines
- uid: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllLines(System.String,System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllLines(System.String,System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities
  isExternal: true
  name: ReadAllLines(String, Encoding)
  nameWithType: IFileReaderUtilities.ReadAllLines(String, Encoding)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllLines(System.String, System.Text.Encoding)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllLines(System.String,System.Text.Encoding)
    name: ReadAllLines
    nameWithType: IFileReaderUtilities.ReadAllLines
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllLines
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllLines(System.String,System.Text.Encoding)
    name: ReadAllLines
    nameWithType: IFileReaderUtilities.ReadAllLines
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllLines
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Collections.Immutable.IImmutableList{System.String}
  commentId: T:System.Collections.Immutable.IImmutableList{System.String}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.IImmutableList`1
  name: IImmutableList<String>
  nameWithType: IImmutableList<String>
  fullName: System.Collections.Immutable.IImmutableList<System.String>
  nameWithType.vb: IImmutableList(Of String)
  fullName.vb: System.Collections.Immutable.IImmutableList(Of System.String)
  name.vb: IImmutableList(Of String)
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableList`1
    name: IImmutableList
    nameWithType: IImmutableList
    fullName: System.Collections.Immutable.IImmutableList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllText*
  commentId: Overload:Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllText
  name: ReadAllText
  nameWithType: FileReaderUtilities.ReadAllText
  fullName: Landorphan.Abstractions.IO.FileReaderUtilities.ReadAllText
- uid: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllText(System.String,System.Text.Encoding)
  commentId: M:Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllText(System.String,System.Text.Encoding)
  parent: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities
  isExternal: true
  name: ReadAllText(String, Encoding)
  nameWithType: IFileReaderUtilities.ReadAllText(String, Encoding)
  fullName: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllText(System.String, System.Text.Encoding)
  spec.csharp:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllText(System.String,System.Text.Encoding)
    name: ReadAllText
    nameWithType: IFileReaderUtilities.ReadAllText
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllText
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllText(System.String,System.Text.Encoding)
    name: ReadAllText
    nameWithType: IFileReaderUtilities.ReadAllText
    fullName: Landorphan.Abstractions.IO.Interfaces.IFileReaderUtilities.ReadAllText
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
