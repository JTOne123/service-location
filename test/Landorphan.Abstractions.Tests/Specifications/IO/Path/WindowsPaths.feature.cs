// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Landorphan.Abstractions.Tests.Specifications.IO.Path
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("WindowsPaths")]
    [NUnit.Framework.CategoryAttribute("Check-In")]
    public partial class WindowsPathsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WindowsPaths.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WindowsPaths", "In order to reliably interact with the file systems of multiple platforms\r\nAs a d" +
                    "eveloper\r\nI want to be able to parse paths on multiple platforms correctly", ProgrammingLanguage.CSharp, new string[] {
                        "Check-In"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Drive Rooted Paths")]
        [NUnit.Framework.TestCaseAttribute("Null", "(null)", "1", "{Null} (null)", "(null)", "(null)", "(null)", "Absolute", "Illegal", null)]
        [NUnit.Framework.TestCaseAttribute("Empty", "(empty)", "1", "{Empty} (empty)", "(null)", "(null)", "(null)", "Absolute", "Illegal", null)]
        [NUnit.Framework.TestCaseAttribute("Volume Absolute", "C:\\", "1", "{Root} C", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Volume Relative", "C:.\\file.txt", "2", "{Volume} C", "{Self} .", "{Segment} file.txt", "(null)", "Relative", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("UNC", "\\server\\share\\dir\\file.txt", "4", "{Server} server", "{Segment} share", "{Segment} dir", "{Segment} file.txt", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long Volume Abs", "\\?\\C:\\dir\\file.txt", "3", "{Root} C", "{Segment} dir", "{Segment} file.txt", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long UNC", "\\?\\UNC\\server\\share\\dir\\file.txt", "4", "{Server} server", "{Segment} share", "{Segment} dir", "{Segment} file.txt", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Self Relative", ".\\dir\\file.txt", "3", "{Self} .", "{Segment} dir", "{Segment} file.txt", "(null)", "Relative", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Parent Relative", "..\\dir\\file.txt", "3", "{Parent} ..", "{Segment} dir", "{Segment} file.txt", "(null)", "Relative", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Empty Abs Segment", "C:\\dir\\file.txt", "4", "{Root} C", "{Segment} dir", "{Empty} (empty)", "{Segment} file.txt", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Empty Rel Segment", ".\\dir\\file.txt", "4", "{Self} .", "{segment} dir", "{Empty} (empty)", "{Segment} file.txt", "Relative", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Relative", "dir\\file.txt", "2", "{Segment} dir", "{Segment} file.txt", "(null)", "(null)", "Relative", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("CON", "CON", "1", "{Device} CON", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("PRN", "PRN", "1", "{Device} PRN", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("AUX", "AUX", "1", "{Device} AUX", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("NUL", "NUL", "1", "{Device} NUL", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("COM1", "COM1", "1", "{Device} COM1", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("COM2", "COM2", "1", "{Device} COM2", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("COM3", "COM3", "1", "{Device} COM3", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("COM4", "COM4", "1", "{Device} COM4", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("COM5", "COM5", "1", "{Device} COM5", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("COM6", "COM6", "1", "{Device} COM6", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("COM7", "COM7", "1", "{Device} COM7", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("COM8", "COM8", "1", "{Device} COM8", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("COM9", "COM9", "1", "{Device} COM9", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("LPT1", "LPT1", "1", "{Device} LPT1", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("LPT2", "LPT2", "1", "{Device} LPT2", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("LPT3", "LPT3", "1", "{Device} LPT3", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("LPT4", "LPT4", "1", "{Device} LPT4", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("LPT5", "LPT5", "1", "{Device} LPT5", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("LPT6", "LPT6", "1", "{Device} LPT6", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("LPT7", "LPT7", "1", "{Device} LPT7", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("LPT8", "LPT8", "1", "{Device} LPT8", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("LPT9", "LPT9", "1", "{Device} LPT9", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long CON", "\\?\\CON", "1", "{Device} CON", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long PRN", "\\?\\PRN", "1", "{Device} PRN", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long AUX", "\\?\\AUX", "1", "{Device} AUX", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long NUL", "\\?\\NUL", "1", "{Device} NUL", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM1", "\\?\\COM1", "1", "{Device} COM1", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM2", "\\?\\COM2", "1", "{Device} COM2", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM3", "\\?\\COM3", "1", "{Device} COM3", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM4", "\\?\\COM4", "1", "{Device} COM4", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM5", "\\?\\COM5", "1", "{Device} COM5", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM6", "\\?\\COM6", "1", "{Device} COM6", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM7", "\\?\\COM7", "1", "{Device} COM7", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM8", "\\?\\COM8", "1", "{Device} COM8", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long COM9", "\\?\\COM9", "1", "{Device} COM9", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT1", "\\?\\LPT1", "1", "{Device} LPT1", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT2", "\\?\\LPT2", "1", "{Device} LPT2", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT3", "\\?\\LPT3", "1", "{Device} LPT3", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT4", "\\?\\LPT4", "1", "{Device} LPT4", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT5", "\\?\\LPT5", "1", "{Device} LPT5", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT6", "\\?\\LPT6", "1", "{Device} LPT6", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT7", "\\?\\LPT7", "1", "{Device} LPT7", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT8", "\\?\\LPT8", "1", "{Device} LPT8", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Long LPT9", "\\?\\LPT9", "1", "{Device} LPT9", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Rel CON", "..\\.\\CON", "1", "{Device} CON", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Abs Con", "C:\\CON", "1", "{Device} CON", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Volume CON", "CON:", "1", "{Device} CON", "(null)", "(null)", "(null)", "Absolute", "Legal", null)]
        [NUnit.Framework.TestCaseAttribute("Discuraged Rel NUL", ".\\NUL.txt", "2", "{Self} .", "{Segment} NUL.txt", "(null)", "(null)", "Relative", "Discouraged", null)]
        [NUnit.Framework.TestCaseAttribute("Illegal Rel Astr", ".\\foo*bar.txt", "2", "{Self} .", "{Segment} foo*bar.txt", "(null)", "(null)", "Relative", "Illegal", null)]
        [NUnit.Framework.TestCaseAttribute("Illegal Rel Ques", ".\\foo?bar.txt", "2", "{Self} .", "{Segment} foo?bar.txt", "(null)", "(null)", "Relative", "Illegal", null)]
        [NUnit.Framework.TestCaseAttribute("Illegal Rel Colon", ".\\foo:bar.txt", "2", "{Self} .", "{Segmant} foo:bar.txt", "(null)", "(null)", "Relative", "Illegal", null)]
        public virtual void DriveRootedPaths(string name, string path, string length, string root, string segment1, string segment2, string segment3, string anchor, string status, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drive Rooted Paths", exampleTags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have the following path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
  testRunner.When("I parse the path as a Windows Path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
  testRunner.Then("I should receive a path object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
   testRunner.And(string.Format("the segment \"root\" should be {0}", root), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
   testRunner.And(string.Format("the segment \"1\" should be {0}", segment1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
   testRunner.And(string.Format("the segment \"2\" should be {0}", segment2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
   testRunner.And(string.Format("the segment \"3\" should be {0}", segment3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
   testRunner.And(string.Format("the path should be anchored to {0}", anchor), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
   testRunner.And(string.Format("the parse status should be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
   testRunner.And(string.Format("the segment length should be {0}", length), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
