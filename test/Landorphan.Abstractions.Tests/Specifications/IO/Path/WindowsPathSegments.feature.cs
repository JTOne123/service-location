// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Landorphan.Abstractions.Tests.Specifications.IO.Path
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Windows Path Segments")]
    [NUnit.Framework.CategoryAttribute("Check-In")]
    public partial class WindowsPathSegmentsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WindowsPathSegments.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Windows Path Segments", "In order to develop a reliable Windows Path parser \nAs a member of the Landorphan" +
                    " Team\nI want to to be able to convert incoming paths into a more managable form", ProgrammingLanguage.CSharp, new string[] {
                        "Check-In"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Windows tokenizer generates the following tokens")]
        [NUnit.Framework.TestCaseAttribute("(null)", "(null)", "(null)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("(empty)", "(empty)", "(null)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:`", "C:", "(empty)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file.txt", "C:", "dir", "file.txt", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`file.txt`", "C:", "dir", "file.txt", "(empty)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir", "C:", "dir", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir`", "C:", "dir", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:`dir``file.txt", "C:", "dir", "(empty)", "file.txt", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:.`file.txt", "C:.", "file.txt", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:.`file.txt`", "C:.", "file.txt", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:file.txt", "C:file.txt", "(null)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:file.txt`", "C:file.txt", "(empty)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:dir", "C:dir", "(null)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:dir`", "C:dir", "(empty)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:dir`file.txt", "C:dir", "file.txt", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("C:dir`file.txt`", "C:dir", "file.txt", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("``server`share", "UNC:server", "share", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("``server`share`", "UNC:server", "share", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("``server`file.txt", "UNC:server", "file.txt", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("``server`file.txt`", "UNC:server", "file.txt", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("``server`share`dir`file.txt", "UNC:server", "share", "dir", "file.txt", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("``server`share`dir`file.txt`", "UNC:server", "share", "dir", "file.txt", "(empty)", null)]
        [NUnit.Framework.TestCaseAttribute("``?`C:`dir`file.txt", "C:", "dir", "file.txt", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("``?`C:`dir`file.txt`", "C:", "dir", "file.txt", "(empty)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("``?`UNC`server`share`dir`file.txt", "UNC:server", "share", "dir", "file.txt", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("``?`UNC`server`share`dir`file.txt`", "UNC:server", "share", "dir", "file.txt", "(empty)", null)]
        [NUnit.Framework.TestCaseAttribute("`dir`file.txt`", "(empty)", "dir", "file.txt", "(empty)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute(".", ".", "(null)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute(".`", ".", "(empty)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute(".`file.txt", ".", "file.txt", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute(".`file.txt`", ".", "file.txt", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute(".`dir", ".", "dir", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute(".`dir`", ".", "dir", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute(".`dir`file.txt", ".", "dir", "file.txt", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute(".`dir`file.txt`", ".", "dir", "file.txt", "(empty)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("..", "..", "(null)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("..`", "..", "(empty)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("..`dir`file.txt", "..", "dir", "file.txt", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("..`dir`file.txt`", "..", "dir", "file.txt", "(empty)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("UNC:server", "UNC:server", "(null)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("UNC:server`", "UNC:server", "(empty)", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("UNC:server`share", "UNC:server", "share", "(null)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("UNC:server`share`", "UNC:server", "share", "(empty)", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("UNC:server`share`dir", "UNC:server", "share", "dir", "(null)", "(null)", null)]
        [NUnit.Framework.TestCaseAttribute("UNC:server`share`dir`", "UNC:server", "share", "dir", "(empty)", "(null)", null)]
        public virtual void WindowsTokenizerGeneratesTheFollowingTokens(string path, string segment0, string segment1, string segment2, string segment3, string segment4, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Windows tokenizer generates the following tokens", exampleTags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given(string.Format("I have the following path: {0}", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
  testRunner.When("I segment the Windows path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
  testRunner.Then(string.Format("segment \'0\' should be: {0}", segment0), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
     testRunner.And(string.Format("segment \'1\' should be: {0}", segment1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
     testRunner.And(string.Format("segment \'2\' should be: {0}", segment2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
     testRunner.And(string.Format("segment \'3\' should be: {0}", segment3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
     testRunner.And(string.Format("segment \'4\' should be: {0}", segment4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
