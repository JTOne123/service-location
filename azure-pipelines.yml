# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  solution: 'Landorphan.Ioc.ServiceLocation.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
  - stage: win_build
    displayName: Windows Build
    dependsOn: 
    jobs:
    - job: sign_setup
      displayName: Setup System for Code Signing
      dependsOn: []
      pool:
        vmImage: 'windows-latest'
      steps:
      - template: prepare.yml
      - script: |
          echo Write your commands here
          mkdir "$(Build.BinariesDirectory)/raw-build"
          dir "$(Build.BinariesDirectory)/raw-build"
          set
          
          echo ""
          echo ""
          echo "dotnet --list-runtimes"
          dotnet --list-runtimes
          echo ""
          echo ""
          echo "dotnet --list-sdks"
          dotnet --list-sdks
          echo ""
          echo ""
          echo Use the environment variables input below to pass secret variables to this script
        displayName: 'Display Environment Info & Setup'

      - script: |
          echo Write your commands here
          
          mkdir %AGENT_BUILDDIRECTORY%\d
          
          echo Use the environment variables input below to pass secret variables to this script
        displayName: 'Create Dependency Directory'

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            # Write your PowerShell commands here.
            
            echo 'Generating Key'
            & 'C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\sn.exe' -k '$(Agent.TempDirectory)\fake.snk'
            
            echo 'Exctracting Publick Key'
            & 'C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\sn.exe' -p '$(Agent.TempDirectory)\fake.snk' '$(Agent.TempDirectory)\fake.publickey'
            
            echo 'Converting Publik Key to String'
            & 'C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\sn.exe' -q -tp '$(Agent.TempDirectory)\fake.publickey' | Out-File -Encoding ASCII -FilePath '$(Agent.TempDirectory)\fake.token'

            cat '$(Agent.TempDirectory)\fake.token'

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            # Write your commands here
            
            echo 'Displaying PublicKey Text'
            cat '$(Agent.TempDirectory)/fake.token'

            echo 'Striping content from publickey text'
            cat '$(Agent.TempDirectory)/fake.token' | sed '/^\W*$/d' | sed '/^Pub.*$/d' | tr -d '\r\n' > '$(Agent.TempDirectory)/fake.hex'
            
            echo 'Setting Publickey variable'
            publickey=$(cat '$(Agent.TempDirectory)/fake.hex')
            echo 'displaying publickey hex code'
            echo $publickey

            ls '$(Agent.TempDirectory)'
            echo "Completed Script"

      - script: error 

      - task: DotNetCoreCLI@2
        displayName: 'Download AzureSignTool'
        inputs:
          command: custom
          custom: tool
          arguments: 'install AzureSignTool --version 2.0.17 --tool-path $(Agent.BuildDirectory)\d'

      - bash: |
          # Write your commands here
          
          convert_path() {
            echo $(echo "/$1" | sed 's/\\/\//g' | sed 's/://' | sed -e 's/\(.*\)/\L\1/')
          }
          
          TOOL_PATH="$(echo $(convert_path '$(Agent.BuildDirectory)\d\NuGetKeyVaultSignTool.zip'))"
          
          echo $TOOL_PATH
          
          curl -o "$TOOL_PATH" "https://lndfbuild.blob.core.windows.net/utils/NuGetKeyVaultSignTool.zip"
          
          # Use the environment variables input below to pass secret variables to this script
        displayName: 'Download NuGetKeyVaultSignTool.zip'

      - powershell: |
          # Write your powershell commands here.
          
          Expand-Archive -Path "$(Agent.BuildDirectory)\d\NuGetKeyVaultSignTool.zip" -DestinationPath "$(Agent.BuildDirectory)\d\"
          
          # Use the environment variables input below to pass secret variables to this script.
        displayName: 'Unzip NuGetKeyVaultSignTool.zip into Agent.BuildDirectory\\d'

      - task: eliostruyf.build-task.custom-build-task.file-creator@2
        displayName: 'Create sign.cs File'
        inputs:
          fileoverwrite: true
          filepath: '$(Build.SourcesDirectory)\sign.cs'
          filecontent: |
            using System.Reflection;
            
            [assembly:AssemblyKeyFileAttribute(@"$(Agent.TempDirectory)\Landorphan-Light.snk")]


      - bash: |
          # Write your commands here
          
          VERSION_FILE="$(echo '/$(Build.BinariesDirectory)' | sed 's/\\/\//g' | sed 's/://' | sed -e 's/\(.*\)/\L\1/')/raw-build/version.txt"
          echo $VERSION_FILE 
          find AssemblyVersion.cs -exec sed -i -r "s/\(\"([0-9]+\.[0-9]+)\.[0-9]+\"/(\"\1\."$BUILD_BUILDID"\"/g" {} \;
          cat AssemblyVersion.cs | grep -oP '(?<=AssemblyVersion\(\")[0-9]+\.[0-9]+\.[0-9]+' > $VERSION_FILE
          
          # Use the environment variables input below to pass secret variables to this script
        displayName: 'Update Build Version'

      - powershell: |
          # Write your powershell commands here.
          
          $Env:VERSION = (cat '$(Build.BinariesDirectory)\raw-build\version.txt')
          if ($env:BUILD_SOURCEBRANCHNAME -eq 'develop') 
          { 
            $Env:VERSION = $Env:VERSION + "-prerelease"; 
          }
          elseif ($env:BUILD_SOURCEBRANCHNAME -eq 'master') 
          { 
          }
          else 
          { 
            $Env:VERSION = $Env:VERSION + "-develop"; 
          }
          echo "$Env:VERSION"
          
          Out-File -FilePath '$(Build.BinariesDirectory)\raw-build\version.txt' -InputObject $Env:VERSION -Encoding ASCII
          # Use the environment variables input below to pass secret variables to this script.
        displayName: 'Add Pre-release qualifer'

      - task: eliostruyf.build-task.custom-build-task.file-creator@2
        displayName: 'Create sign.proj File'
        inputs:
          fileoverwrite: true
          filepath: '$(Build.SourcesDirectory)\\sign.proj'
          filecontent: |
            <Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
              <ItemGroup>
                <Compile Include="$(Build.SourcesDirectory)\sign.cs" />
              </ItemGroup>
            </Project>
          
      - task: DownloadSecureFile@1
        inputs:
          secureFile: 'Landorphan-Light.snk'

      - script: |
          echo Write your commands here

          dir %BUILD_SOURCESDIRECTORY%   
          dir %BUILD_BINARIESDIRECTORY%
          dir d:\a\_temp
          cat %BUILD_SOURCESDIRECTORY%\sign.cs
          dir "$(Agent.BuildDirectory)\d"
          
          echo Use the environment variables input below to pass secret variables to this script
        displayName: 'Display Directory Info'

      - task: NuGetCommand@2
        inputs:
          restoreSolution: '$(solution)'

      - task: VSBuild@1
        displayName: 'Build solution **/Landorphan.Ioc.ServiceLocation.sln'
        inputs:
          solution: '**/Landorphan.Ioc.ServiceLocation.sln'
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'
          
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault: landorphan-build'
        inputs:
          azureSubscription: 'Landorphan Holdings (1286ed67-15ce-4500-899e-e79313d8329f)'
          KeyVaultName: 'landorphan-build'
          SecretsFilter: 'LandorphanKeyVaultKey'

      - script: |
          echo Write your commands here
          
          %AGENT_BUILDDIRECTORY%\d\AzureSignTool.exe sign "%BUILD_SOURCESDIRECTORY%\bin\release\Landorphan.Ioc.ServiceLocation\net451\Landorphan.Ioc.ServiceLocation.dll" --file-digest sha256 --description-url "https://github.com/landorphan/service-location" --no-page-hashing --timestamp-rfc3161 http://timestamp.comodoca.com --timestamp-digest sha256 --azure-key-vault-url "https://landorphan-build.vault.azure.net/" --azure-key-vault-client-id "b32bbbae-55c3-4f5b-bf40-0292d349886f" --azure-key-vault-client-secret "$(LandorphanKeyVaultKey)" --azure-key-vault-certificate "Landorphan-LightWeight-CodeSign"
          
          %AGENT_BUILDDIRECTORY%\d\AzureSignTool.exe sign "%BUILD_SOURCESDIRECTORY%\bin\release\Landorphan.Ioc.ServiceLocation\netstandard2.0\Landorphan.Ioc.ServiceLocation.dll" --file-digest sha256 --description-url "https://github.com/landorphan/service-location" --no-page-hashing --timestamp-rfc3161 http://timestamp.comodoca.com --timestamp-digest sha256 --azure-key-vault-url "https://landorphan-build.vault.azure.net/" --azure-key-vault-client-id "b32bbbae-55c3-4f5b-bf40-0292d349886f" --azure-key-vault-client-secret "$(LandorphanKeyVaultKey)" --azure-key-vault-certificate "Landorphan-LightWeight-CodeSign"
          
          echo Use the environment variables input below to pass secret variables to this script
        displayName: 'ServiceLocation: Azure Code Sign copy'


      - task: VSTest@2
        displayName: 'VsTest - testAssemblies'
        inputs:
          testAssemblyVer2: |
            **\$(BuildConfiguration)\**\*Tests.dll
            **\$(BuildConfiguration)\**\*Tests.*.dll
            !**\obj\**
          testFiltercriteria: '(TestCategory=Check-In|Check-In-Non-Ide)'
          codeCoverageEnabled: true
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'
          diagnosticsEnabled: True

      - task: CopyFiles@2
        displayName: 'TEMP: Copy Files to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(system.defaultworkingdirectory)'
          Contents: '$(Build.SourcesDirectory)\**\bin\$(BuildConfiguration)\**'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'


      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'